extern crate libc;

#[allow(dead_code)]
#[allow(bad_style)]
pub mod jvmti_native {
    /* automatically generated by rust-bindgen */
    pub type __int8_t = ::libc::c_char;
    pub type __uint8_t = ::libc::c_uchar;
    pub type __int16_t = ::libc::c_short;
    pub type __uint16_t = ::libc::c_ushort;
    pub type __int32_t = ::libc::c_int;
    pub type __uint32_t = ::libc::c_uint;
    pub type __int64_t = ::libc::c_longlong;
    pub type __uint64_t = ::libc::c_ulonglong;
    pub type __darwin_intptr_t = ::libc::c_long;
    pub type __darwin_natural_t = ::libc::c_uint;
    pub type __darwin_ct_rune_t = ::libc::c_int;

    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_Unnamed1 {
        pub _bindgen_data_: [u64; 16usize],
    }
    impl Union_Unnamed1 {
        pub unsafe fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128usize] {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        #[allow(non_snake_case)]
        pub unsafe fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_Unnamed1 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_Unnamed1 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __mbstate_t = Union_Unnamed1;
    pub type __darwin_mbstate_t = __mbstate_t;
    pub type __darwin_ptrdiff_t = ::libc::c_long;
    pub type __darwin_size_t = ::libc::c_ulong;
    pub type __darwin_va_list = __builtin_va_list;
    pub type __darwin_wchar_t = ::libc::c_int;
    pub type __darwin_rune_t = __darwin_wchar_t;
    pub type __darwin_wint_t = ::libc::c_int;
    pub type __darwin_clock_t = ::libc::c_ulong;
    pub type __darwin_socklen_t = __uint32_t;
    pub type __darwin_ssize_t = ::libc::c_long;
    pub type __darwin_time_t = ::libc::c_long;
    pub type __darwin_blkcnt_t = __int64_t;
    pub type __darwin_blksize_t = __int32_t;
    pub type __darwin_dev_t = __int32_t;
    pub type __darwin_fsblkcnt_t = ::libc::c_uint;
    pub type __darwin_fsfilcnt_t = ::libc::c_uint;
    pub type __darwin_gid_t = __uint32_t;
    pub type __darwin_id_t = __uint32_t;
    pub type __darwin_ino64_t = __uint64_t;
    pub type __darwin_ino_t = __darwin_ino64_t;
    pub type __darwin_mach_port_name_t = __darwin_natural_t;
    pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
    pub type __darwin_mode_t = __uint16_t;
    pub type __darwin_off_t = __int64_t;
    pub type __darwin_pid_t = __int32_t;
    pub type __darwin_sigset_t = __uint32_t;
    pub type __darwin_suseconds_t = __int32_t;
    pub type __darwin_uid_t = __uint32_t;
    pub type __darwin_useconds_t = __uint32_t;
    pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
    pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];

    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___darwin_pthread_handler_rec {
        pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void) -> ()>,
        pub __arg: *mut ::libc::c_void,
        pub __next: *mut Struct___darwin_pthread_handler_rec,
    }
    impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_attr_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 56usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_attr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_cond_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 40usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_cond_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_condattr_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 8usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_mutex_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 56usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_mutexattr_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 8usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_once_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 8usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_once_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_rwlock_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 192usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_rwlockattr_t {
        pub __sig: ::libc::c_long,
        pub __opaque: [::libc::c_char; 16usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__opaque_pthread_t {
        pub __sig: ::libc::c_long,
        pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
        pub __opaque: [::libc::c_char; 8176usize],
    }
    impl ::std::clone::Clone for Struct__opaque_pthread_t {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__opaque_pthread_t {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
    pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
    pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
    pub type __darwin_pthread_key_t = ::libc::c_ulong;
    pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
    pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
    pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
    pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
    pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
    pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
    pub type __darwin_nl_item = ::libc::c_int;
    pub type __darwin_wctrans_t = ::libc::c_int;
    pub type __darwin_wctype_t = __uint32_t;
    pub type va_list = __builtin_va_list;
    pub type size_t = __darwin_size_t;
    pub type fpos_t = __darwin_off_t;

    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___sbuf {
        pub _base: *mut ::libc::c_uchar,
        pub _size: ::libc::c_int,
    }
    impl ::std::clone::Clone for Struct___sbuf {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___sbuf {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub enum Struct___sFILEX { }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct___sFILE {
        pub _p: *mut ::libc::c_uchar,
        pub _r: ::libc::c_int,
        pub _w: ::libc::c_int,
        pub _flags: ::libc::c_short,
        pub _file: ::libc::c_short,
        pub _bf: Struct___sbuf,
        pub _lbfsize: ::libc::c_int,
        pub _cookie: *mut ::libc::c_void,
        pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut ::libc::c_void)
                                              -> ::libc::c_int>,
        pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::libc::c_void,
                                                              arg2:
                                                                  *mut ::libc::c_char,
                                                              arg3: ::libc::c_int)
                                             -> ::libc::c_int>,
        pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::libc::c_void,
                                                              arg2: fpos_t,
                                                              arg3: ::libc::c_int)
                                             -> fpos_t>,
        pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut ::libc::c_void,
                                                               arg2:
                                                                   *const ::libc::c_char,
                                                               arg3:
                                                                   ::libc::c_int)
                                              -> ::libc::c_int>,
        pub _ub: Struct___sbuf,
        pub _extra: *mut Struct___sFILEX,
        pub _ur: ::libc::c_int,
        pub _ubuf: [::libc::c_uchar; 3usize],
        pub _nbuf: [::libc::c_uchar; 1usize],
        pub _lb: Struct___sbuf,
        pub _blksize: ::libc::c_int,
        pub _offset: fpos_t,
    }
    impl ::std::clone::Clone for Struct___sFILE {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___sFILE {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type FILE = Struct___sFILE;
    pub type off_t = __darwin_off_t;
    pub type ssize_t = __darwin_ssize_t;
    pub type __gnuc_va_list = __builtin_va_list;
    pub type jint = ::libc::c_int;
    pub type jlong = ::libc::c_long;
    pub type jbyte = ::libc::c_char;
    pub type jboolean = ::libc::c_uchar;
    pub type jchar = ::libc::c_ushort;
    pub type jshort = ::libc::c_short;
    pub type jfloat = ::libc::c_float;
    pub type jdouble = ::libc::c_double;
    pub type jsize = jint;
    #[repr(C)]
    pub struct Struct__jobject { pub _hacky_hack_workaround: u32 }
    pub type jobject = *mut Struct__jobject;
    pub type jclass = jobject;
    pub type jthrowable = jobject;
    pub type jstring = jobject;
    pub type jarray = jobject;
    pub type jbooleanArray = jarray;
    pub type jbyteArray = jarray;
    pub type jcharArray = jarray;
    pub type jshortArray = jarray;
    pub type jintArray = jarray;
    pub type jlongArray = jarray;
    pub type jfloatArray = jarray;
    pub type jdoubleArray = jarray;
    pub type jobjectArray = jarray;
    pub type jweak = jobject;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union_jvalue {
        pub _bindgen_data_: [u64; 1usize],
    }
    impl Union_jvalue {
        pub unsafe fn z(&mut self) -> *mut jboolean {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn b(&mut self) -> *mut jbyte {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn c(&mut self) -> *mut jchar {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn s(&mut self) -> *mut jshort {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn i(&mut self) -> *mut jint {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn j(&mut self) -> *mut jlong {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn f(&mut self) -> *mut jfloat {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn d(&mut self) -> *mut jdouble {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn l(&mut self) -> *mut jobject {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union_jvalue {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union_jvalue {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type jvalue = Union_jvalue;
    pub enum Struct__jfieldID { }
    pub type jfieldID = *mut Struct__jfieldID;
    pub enum Struct__jmethodID { }
    pub type jmethodID = *mut Struct__jmethodID;
    pub type Enum__jobjectType = ::libc::c_uint;
    pub const JNIInvalidRefType: ::libc::c_uint = 0;
    pub const JNILocalRefType: ::libc::c_uint = 1;
    pub const JNIGlobalRefType: ::libc::c_uint = 2;
    pub const JNIWeakGlobalRefType: ::libc::c_uint = 3;
    pub type jobjectRefType = Enum__jobjectType;

    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed2 {
        pub name: *mut ::libc::c_char,
        pub signature: *mut ::libc::c_char,
        pub fnPtr: *mut ::libc::c_void,
    }
    impl ::std::clone::Clone for Struct_Unnamed2 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed2 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JNINativeMethod = Struct_Unnamed2;
    pub type JNIEnv = *const Struct_JNINativeInterface_;
    pub type JavaVM = *const Struct_JNIInvokeInterface_;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JNINativeInterface_ {
        pub reserved0: *mut ::libc::c_void,
        pub reserved1: *mut ::libc::c_void,
        pub reserved2: *mut ::libc::c_void,
        pub reserved3: *mut ::libc::c_void,
        pub GetVersion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv)
                                                  -> jint>,
        pub DefineClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    name:
                                                                        *const ::libc::c_char,
                                                                    loader:
                                                                        jobject,
                                                                    buf:
                                                                        *const jbyte,
                                                                    len: jsize)
                                                   -> jclass>,
        pub FindClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  name:
                                                                      *const ::libc::c_char)
                                                 -> jclass>,
        pub FromReflectedMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            method:
                                                                                jobject)
                                                           -> jmethodID>,
        pub FromReflectedField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           field:
                                                                               jobject)
                                                          -> jfieldID>,
        pub ToReflectedMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          cls:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          isStatic:
                                                                              jboolean)
                                                         -> jobject>,
        pub GetSuperclass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      sub: jclass)
                                                     -> jclass>,
        pub IsAssignableFrom: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         sub:
                                                                             jclass,
                                                                         sup:
                                                                             jclass)
                                                        -> jboolean>,
        pub ToReflectedField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         cls:
                                                                             jclass,
                                                                         fieldID:
                                                                             jfieldID,
                                                                         isStatic:
                                                                             jboolean)
                                                        -> jobject>,
        pub Throw: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv,
                                                              obj: jthrowable)
                                             -> jint>,
        pub ThrowNew: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv,
                                                                 clazz: jclass,
                                                                 msg:
                                                                     *const ::libc::c_char)
                                                -> jint>,
        pub ExceptionOccurred: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv)
                                                         -> jthrowable>,
        pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv)
                                                         -> ()>,
        pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv)
                                                      -> ()>,
        pub FatalError: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   msg:
                                                                       *const ::libc::c_char)
                                                  -> ()>,
        pub PushLocalFrame: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       capacity:
                                                                           jint)
                                                      -> jint>,
        pub PopLocalFrame: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      result:
                                                                          jobject)
                                                     -> jobject>,
        pub NewGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     lobj:
                                                                         jobject)
                                                    -> jobject>,
        pub DeleteGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        gref:
                                                                            jobject)
                                                       -> ()>,
        pub DeleteLocalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject)
                                                      -> ()>,
        pub IsSameObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj1:
                                                                         jobject,
                                                                     obj2:
                                                                         jobject)
                                                    -> jboolean>,
        pub NewLocalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    _ref: jobject)
                                                   -> jobject>,
        pub EnsureLocalCapacity: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            capacity:
                                                                                jint)
                                                           -> jint>,
        pub AllocObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz: jclass)
                                                   -> jobject>,
        pub NewObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz: jclass,
                                                                  methodID:
                                                                      jmethodID, ...)
                                                 -> jobject>,
        pub NewObjectV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz: jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args: va_list)
                                                  -> jobject>,
        pub NewObjectA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz: jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       *const jvalue)
                                                  -> jobject>,
        pub GetObjectClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject)
                                                      -> jclass>,
        pub IsInstanceOf: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject,
                                                                     clazz:
                                                                         jclass)
                                                    -> jboolean>,
        pub GetMethodID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz: jclass,
                                                                    name:
                                                                        *const ::libc::c_char,
                                                                    sig:
                                                                        *const ::libc::c_char)
                                                   -> jmethodID>,
        pub CallObjectMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         methodID:
                                                                             jmethodID, ...)
                                                        -> jobject>,
        pub CallObjectMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          obj:
                                                                              jobject,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              va_list)
                                                         -> jobject>,
        pub CallObjectMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          obj:
                                                                              jobject,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              *const jvalue)
                                                         -> jobject>,
        pub CallBooleanMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          obj:
                                                                              jobject,
                                                                          methodID:
                                                                              jmethodID, ...)
                                                         -> jboolean>,
        pub CallBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           obj:
                                                                               jobject,
                                                                           methodID:
                                                                               jmethodID,
                                                                           args:
                                                                               va_list)
                                                          -> jboolean>,
        pub CallBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           obj:
                                                                               jobject,
                                                                           methodID:
                                                                               jmethodID,
                                                                           args:
                                                                               *const jvalue)
                                                          -> jboolean>,
        pub CallByteMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID, ...)
                                                      -> jbyte>,
        pub CallByteMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            va_list)
                                                       -> jbyte>,
        pub CallByteMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            *const jvalue)
                                                       -> jbyte>,
        pub CallCharMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID, ...)
                                                      -> jchar>,
        pub CallCharMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            va_list)
                                                       -> jchar>,
        pub CallCharMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            *const jvalue)
                                                       -> jchar>,
        pub CallShortMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID, ...)
                                                       -> jshort>,
        pub CallShortMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             va_list)
                                                        -> jshort>,
        pub CallShortMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             *const jvalue)
                                                        -> jshort>,
        pub CallIntMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      methodID:
                                                                          jmethodID, ...)
                                                     -> jint>,
        pub CallIntMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           va_list)
                                                      -> jint>,
        pub CallIntMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           *const jvalue)
                                                      -> jint>,
        pub CallLongMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID, ...)
                                                      -> jlong>,
        pub CallLongMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            va_list)
                                                       -> jlong>,
        pub CallLongMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            *const jvalue)
                                                       -> jlong>,
        pub CallFloatMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID, ...)
                                                       -> jfloat>,
        pub CallFloatMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             va_list)
                                                        -> jfloat>,
        pub CallFloatMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             *const jvalue)
                                                        -> jfloat>,
        pub CallDoubleMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         methodID:
                                                                             jmethodID, ...)
                                                        -> jdouble>,
        pub CallDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          obj:
                                                                              jobject,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              va_list)
                                                         -> jdouble>,
        pub CallDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          obj:
                                                                              jobject,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              *const jvalue)
                                                         -> jdouble>,
        pub CallVoidMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID, ...)
                                                      -> ()>,
        pub CallVoidMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            va_list)
                                                       -> ()>,
        pub CallVoidMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            *const jvalue)
                                                       -> ()>,
        pub CallNonvirtualObjectMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut JNIEnv,
                                                                                   obj:
                                                                                       jobject,
                                                                                   clazz:
                                                                                       jclass,
                                                                                   methodID:
                                                                                       jmethodID, ...)
                                                                  -> jobject>,
        pub CallNonvirtualObjectMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut JNIEnv,
                                                                                    obj:
                                                                                        jobject,
                                                                                    clazz:
                                                                                        jclass,
                                                                                    methodID:
                                                                                        jmethodID,
                                                                                    args:
                                                                                        va_list)
                                                                   -> jobject>,
        pub CallNonvirtualObjectMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut JNIEnv,
                                                                                    obj:
                                                                                        jobject,
                                                                                    clazz:
                                                                                        jclass,
                                                                                    methodID:
                                                                                        jmethodID,
                                                                                    args:
                                                                                        *const jvalue)
                                                                   -> jobject>,
        pub CallNonvirtualBooleanMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut JNIEnv,
                                                                                    obj:
                                                                                        jobject,
                                                                                    clazz:
                                                                                        jclass,
                                                                                    methodID:
                                                                                        jmethodID, ...)
                                                                   -> jboolean>,
        pub CallNonvirtualBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                         *mut JNIEnv,
                                                                                     obj:
                                                                                         jobject,
                                                                                     clazz:
                                                                                         jclass,
                                                                                     methodID:
                                                                                         jmethodID,
                                                                                     args:
                                                                                         va_list)
                                                                    -> jboolean>,
        pub CallNonvirtualBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                         *mut JNIEnv,
                                                                                     obj:
                                                                                         jobject,
                                                                                     clazz:
                                                                                         jclass,
                                                                                     methodID:
                                                                                         jmethodID,
                                                                                     args:
                                                                                         *const jvalue)
                                                                    -> jboolean>,
        pub CallNonvirtualByteMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID, ...)
                                                                -> jbyte>,
        pub CallNonvirtualByteMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      va_list)
                                                                 -> jbyte>,
        pub CallNonvirtualByteMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      *const jvalue)
                                                                 -> jbyte>,
        pub CallNonvirtualCharMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID, ...)
                                                                -> jchar>,
        pub CallNonvirtualCharMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      va_list)
                                                                 -> jchar>,
        pub CallNonvirtualCharMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      *const jvalue)
                                                                 -> jchar>,
        pub CallNonvirtualShortMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID, ...)
                                                                 -> jshort>,
        pub CallNonvirtualShortMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut JNIEnv,
                                                                                   obj:
                                                                                       jobject,
                                                                                   clazz:
                                                                                       jclass,
                                                                                   methodID:
                                                                                       jmethodID,
                                                                                   args:
                                                                                       va_list)
                                                                  -> jshort>,
        pub CallNonvirtualShortMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut JNIEnv,
                                                                                   obj:
                                                                                       jobject,
                                                                                   clazz:
                                                                                       jclass,
                                                                                   methodID:
                                                                                       jmethodID,
                                                                                   args:
                                                                                       *const jvalue)
                                                                  -> jshort>,
        pub CallNonvirtualIntMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                obj:
                                                                                    jobject,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID, ...)
                                                               -> jint>,
        pub CallNonvirtualIntMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID,
                                                                                 args:
                                                                                     va_list)
                                                                -> jint>,
        pub CallNonvirtualIntMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID,
                                                                                 args:
                                                                                     *const jvalue)
                                                                -> jint>,
        pub CallNonvirtualLongMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID, ...)
                                                                -> jlong>,
        pub CallNonvirtualLongMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      va_list)
                                                                 -> jlong>,
        pub CallNonvirtualLongMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      *const jvalue)
                                                                 -> jlong>,
        pub CallNonvirtualFloatMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID, ...)
                                                                 -> jfloat>,
        pub CallNonvirtualFloatMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut JNIEnv,
                                                                                   obj:
                                                                                       jobject,
                                                                                   clazz:
                                                                                       jclass,
                                                                                   methodID:
                                                                                       jmethodID,
                                                                                   args:
                                                                                       va_list)
                                                                  -> jfloat>,
        pub CallNonvirtualFloatMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut JNIEnv,
                                                                                   obj:
                                                                                       jobject,
                                                                                   clazz:
                                                                                       jclass,
                                                                                   methodID:
                                                                                       jmethodID,
                                                                                   args:
                                                                                       *const jvalue)
                                                                  -> jfloat>,
        pub CallNonvirtualDoubleMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut JNIEnv,
                                                                                   obj:
                                                                                       jobject,
                                                                                   clazz:
                                                                                       jclass,
                                                                                   methodID:
                                                                                       jmethodID, ...)
                                                                  -> jdouble>,
        pub CallNonvirtualDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut JNIEnv,
                                                                                    obj:
                                                                                        jobject,
                                                                                    clazz:
                                                                                        jclass,
                                                                                    methodID:
                                                                                        jmethodID,
                                                                                    args:
                                                                                        va_list)
                                                                   -> jdouble>,
        pub CallNonvirtualDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut JNIEnv,
                                                                                    obj:
                                                                                        jobject,
                                                                                    clazz:
                                                                                        jclass,
                                                                                    methodID:
                                                                                        jmethodID,
                                                                                    args:
                                                                                        *const jvalue)
                                                                   -> jdouble>,
        pub CallNonvirtualVoidMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID, ...)
                                                                -> ()>,
        pub CallNonvirtualVoidMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      va_list)
                                                                 -> ()>,
        pub CallNonvirtualVoidMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  obj:
                                                                                      jobject,
                                                                                  clazz:
                                                                                      jclass,
                                                                                  methodID:
                                                                                      jmethodID,
                                                                                  args:
                                                                                      *const jvalue)
                                                                 -> ()>,
        pub GetFieldID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz: jclass,
                                                                   name:
                                                                       *const ::libc::c_char,
                                                                   sig:
                                                                       *const ::libc::c_char)
                                                  -> jfieldID>,
        pub GetObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       fieldID:
                                                                           jfieldID)
                                                      -> jobject>,
        pub GetBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        fieldID:
                                                                            jfieldID)
                                                       -> jboolean>,
        pub GetByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject,
                                                                     fieldID:
                                                                         jfieldID)
                                                    -> jbyte>,
        pub GetCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject,
                                                                     fieldID:
                                                                         jfieldID)
                                                    -> jchar>,
        pub GetShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      fieldID:
                                                                          jfieldID)
                                                     -> jshort>,
        pub GetIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj: jobject,
                                                                    fieldID:
                                                                        jfieldID)
                                                   -> jint>,
        pub GetLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject,
                                                                     fieldID:
                                                                         jfieldID)
                                                    -> jlong>,
        pub GetFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      fieldID:
                                                                          jfieldID)
                                                     -> jfloat>,
        pub GetDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       fieldID:
                                                                           jfieldID)
                                                      -> jdouble>,
        pub SetObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       fieldID:
                                                                           jfieldID,
                                                                       val:
                                                                           jobject)
                                                      -> ()>,
        pub SetBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        fieldID:
                                                                            jfieldID,
                                                                        val:
                                                                            jboolean)
                                                       -> ()>,
        pub SetByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject,
                                                                     fieldID:
                                                                         jfieldID,
                                                                     val: jbyte)
                                                    -> ()>,
        pub SetCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject,
                                                                     fieldID:
                                                                         jfieldID,
                                                                     val: jchar)
                                                    -> ()>,
        pub SetShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      fieldID:
                                                                          jfieldID,
                                                                      val: jshort)
                                                     -> ()>,
        pub SetIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj: jobject,
                                                                    fieldID:
                                                                        jfieldID,
                                                                    val: jint)
                                                   -> ()>,
        pub SetLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject,
                                                                     fieldID:
                                                                         jfieldID,
                                                                     val: jlong)
                                                    -> ()>,
        pub SetFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      fieldID:
                                                                          jfieldID,
                                                                      val: jfloat)
                                                     -> ()>,
        pub SetDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       fieldID:
                                                                           jfieldID,
                                                                       val:
                                                                           jdouble)
                                                      -> ()>,
        pub GetStaticMethodID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          name:
                                                                              *const ::libc::c_char,
                                                                          sig:
                                                                              *const ::libc::c_char)
                                                         -> jmethodID>,
        pub CallStaticObjectMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID, ...)
                                                              -> jobject>,
        pub CallStaticObjectMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    va_list)
                                                               -> jobject>,
        pub CallStaticObjectMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    *const jvalue)
                                                               -> jobject>,
        pub CallStaticBooleanMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID, ...)
                                                               -> jboolean>,
        pub CallStaticBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID,
                                                                                 args:
                                                                                     va_list)
                                                                -> jboolean>,
        pub CallStaticBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID,
                                                                                 args:
                                                                                     *const jvalue)
                                                                -> jboolean>,
        pub CallStaticByteMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)
                                                            -> jbyte>,
        pub CallStaticByteMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)
                                                             -> jbyte>,
        pub CallStaticByteMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)
                                                             -> jbyte>,
        pub CallStaticCharMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)
                                                            -> jchar>,
        pub CallStaticCharMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)
                                                             -> jchar>,
        pub CallStaticCharMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)
                                                             -> jchar>,
        pub CallStaticShortMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID, ...)
                                                             -> jshort>,
        pub CallStaticShortMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   va_list)
                                                              -> jshort>,
        pub CallStaticShortMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   *const jvalue)
                                                              -> jshort>,
        pub CallStaticIntMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            methodID:
                                                                                jmethodID, ...)
                                                           -> jint>,
        pub CallStaticIntMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID,
                                                                             args:
                                                                                 va_list)
                                                            -> jint>,
        pub CallStaticIntMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID,
                                                                             args:
                                                                                 *const jvalue)
                                                            -> jint>,
        pub CallStaticLongMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)
                                                            -> jlong>,
        pub CallStaticLongMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)
                                                             -> jlong>,
        pub CallStaticLongMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)
                                                             -> jlong>,
        pub CallStaticFloatMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID, ...)
                                                             -> jfloat>,
        pub CallStaticFloatMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   va_list)
                                                              -> jfloat>,
        pub CallStaticFloatMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   *const jvalue)
                                                              -> jfloat>,
        pub CallStaticDoubleMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID, ...)
                                                              -> jdouble>,
        pub CallStaticDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    va_list)
                                                               -> jdouble>,
        pub CallStaticDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    *const jvalue)
                                                               -> jdouble>,
        pub CallStaticVoidMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             cls:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)
                                                            -> ()>,
        pub CallStaticVoidMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              cls:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)
                                                             -> ()>,
        pub CallStaticVoidMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              cls:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)
                                                             -> ()>,
        pub GetStaticFieldID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         name:
                                                                             *const ::libc::c_char,
                                                                         sig:
                                                                             *const ::libc::c_char)
                                                        -> jfieldID>,
        pub GetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             fieldID:
                                                                                 jfieldID)
                                                            -> jobject>,
        pub GetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              fieldID:
                                                                                  jfieldID)
                                                             -> jboolean>,
        pub GetStaticByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           fieldID:
                                                                               jfieldID)
                                                          -> jbyte>,
        pub GetStaticCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           fieldID:
                                                                               jfieldID)
                                                          -> jchar>,
        pub GetStaticShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            fieldID:
                                                                                jfieldID)
                                                           -> jshort>,
        pub GetStaticIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          fieldID:
                                                                              jfieldID)
                                                         -> jint>,
        pub GetStaticLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           fieldID:
                                                                               jfieldID)
                                                          -> jlong>,
        pub GetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            fieldID:
                                                                                jfieldID)
                                                           -> jfloat>,
        pub GetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             fieldID:
                                                                                 jfieldID)
                                                            -> jdouble>,
        pub SetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             fieldID:
                                                                                 jfieldID,
                                                                             value:
                                                                                 jobject)
                                                            -> ()>,
        pub SetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              clazz:
                                                                                  jclass,
                                                                              fieldID:
                                                                                  jfieldID,
                                                                              value:
                                                                                  jboolean)
                                                             -> ()>,
        pub SetStaticByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           fieldID:
                                                                               jfieldID,
                                                                           value:
                                                                               jbyte)
                                                          -> ()>,
        pub SetStaticCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           fieldID:
                                                                               jfieldID,
                                                                           value:
                                                                               jchar)
                                                          -> ()>,
        pub SetStaticShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            fieldID:
                                                                                jfieldID,
                                                                            value:
                                                                                jshort)
                                                           -> ()>,
        pub SetStaticIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          fieldID:
                                                                              jfieldID,
                                                                          value:
                                                                              jint)
                                                         -> ()>,
        pub SetStaticLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           fieldID:
                                                                               jfieldID,
                                                                           value:
                                                                               jlong)
                                                          -> ()>,
        pub SetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            fieldID:
                                                                                jfieldID,
                                                                            value:
                                                                                jfloat)
                                                           -> ()>,
        pub SetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             fieldID:
                                                                                 jfieldID,
                                                                             value:
                                                                                 jdouble)
                                                            -> ()>,
        pub NewString: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  unicode:
                                                                      *const jchar,
                                                                  len: jsize)
                                                 -> jstring>,
        pub GetStringLength: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        str:
                                                                            jstring)
                                                       -> jsize>,
        pub GetStringChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       str:
                                                                           jstring,
                                                                       isCopy:
                                                                           *mut jboolean)
                                                      -> *const jchar>,
        pub ReleaseStringChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           str:
                                                                               jstring,
                                                                           chars:
                                                                               *const jchar)
                                                          -> ()>,
        pub NewStringUTF: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     utf:
                                                                         *const ::libc::c_char)
                                                    -> jstring>,
        pub GetStringUTFLength: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           str:
                                                                               jstring)
                                                          -> jsize>,
        pub GetStringUTFChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          str:
                                                                              jstring,
                                                                          isCopy:
                                                                              *mut jboolean)
                                                         ->
                                                             *const ::libc::c_char>,
        pub ReleaseStringUTFChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              str:
                                                                                  jstring,
                                                                              chars:
                                                                                  *const ::libc::c_char)
                                                             -> ()>,
        pub GetArrayLength: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jarray)
                                                      -> jsize>,
        pub NewObjectArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       len: jsize,
                                                                       clazz:
                                                                           jclass,
                                                                       init:
                                                                           jobject)
                                                      -> jobjectArray>,
        pub GetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jobjectArray,
                                                                              index:
                                                                                  jsize)
                                                             -> jobject>,
        pub SetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jobjectArray,
                                                                              index:
                                                                                  jsize,
                                                                              val:
                                                                                  jobject)
                                                             -> ()>,
        pub NewBooleanArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        len:
                                                                            jsize)
                                                       -> jbooleanArray>,
        pub NewByteArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     len: jsize)
                                                    -> jbyteArray>,
        pub NewCharArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     len: jsize)
                                                    -> jcharArray>,
        pub NewShortArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      len: jsize)
                                                     -> jshortArray>,
        pub NewIntArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    len: jsize)
                                                   -> jintArray>,
        pub NewLongArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     len: jsize)
                                                    -> jlongArray>,
        pub NewFloatArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      len: jsize)
                                                     -> jfloatArray>,
        pub NewDoubleArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       len: jsize)
                                                      -> jdoubleArray>,
        pub GetBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                array:
                                                                                    jbooleanArray,
                                                                                isCopy:
                                                                                    *mut jboolean)
                                                               -> *mut jboolean>,
        pub GetByteArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jbyteArray,
                                                                             isCopy:
                                                                                 *mut jboolean)
                                                            -> *mut jbyte>,
        pub GetCharArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jcharArray,
                                                                             isCopy:
                                                                                 *mut jboolean)
                                                            -> *mut jchar>,
        pub GetShortArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jshortArray,
                                                                              isCopy:
                                                                                  *mut jboolean)
                                                             -> *mut jshort>,
        pub GetIntArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            array:
                                                                                jintArray,
                                                                            isCopy:
                                                                                *mut jboolean)
                                                           -> *mut jint>,
        pub GetLongArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jlongArray,
                                                                             isCopy:
                                                                                 *mut jboolean)
                                                            -> *mut jlong>,
        pub GetFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jfloatArray,
                                                                              isCopy:
                                                                                  *mut jboolean)
                                                             -> *mut jfloat>,
        pub GetDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               array:
                                                                                   jdoubleArray,
                                                                               isCopy:
                                                                                   *mut jboolean)
                                                              -> *mut jdouble>,
        pub ReleaseBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut JNIEnv,
                                                                                    array:
                                                                                        jbooleanArray,
                                                                                    elems:
                                                                                        *mut jboolean,
                                                                                    mode:
                                                                                        jint)
                                                                   -> ()>,
        pub ReleaseByteArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 array:
                                                                                     jbyteArray,
                                                                                 elems:
                                                                                     *mut jbyte,
                                                                                 mode:
                                                                                     jint)
                                                                -> ()>,
        pub ReleaseCharArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 array:
                                                                                     jcharArray,
                                                                                 elems:
                                                                                     *mut jchar,
                                                                                 mode:
                                                                                     jint)
                                                                -> ()>,
        pub ReleaseShortArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  array:
                                                                                      jshortArray,
                                                                                  elems:
                                                                                      *mut jshort,
                                                                                  mode:
                                                                                      jint)
                                                                 -> ()>,
        pub ReleaseIntArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                array:
                                                                                    jintArray,
                                                                                elems:
                                                                                    *mut jint,
                                                                                mode:
                                                                                    jint)
                                                               -> ()>,
        pub ReleaseLongArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 array:
                                                                                     jlongArray,
                                                                                 elems:
                                                                                     *mut jlong,
                                                                                 mode:
                                                                                     jint)
                                                                -> ()>,
        pub ReleaseFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  array:
                                                                                      jfloatArray,
                                                                                  elems:
                                                                                      *mut jfloat,
                                                                                  mode:
                                                                                      jint)
                                                                 -> ()>,
        pub ReleaseDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut JNIEnv,
                                                                                   array:
                                                                                       jdoubleArray,
                                                                                   elems:
                                                                                       *mut jdouble,
                                                                                   mode:
                                                                                       jint)
                                                                  -> ()>,
        pub GetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jbooleanArray,
                                                                              start:
                                                                                  jsize,
                                                                              l:
                                                                                  jsize,
                                                                              buf:
                                                                                  *mut jboolean)
                                                             -> ()>,
        pub GetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jbyteArray,
                                                                           start:
                                                                               jsize,
                                                                           len:
                                                                               jsize,
                                                                           buf:
                                                                               *mut jbyte)
                                                          -> ()>,
        pub GetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jcharArray,
                                                                           start:
                                                                               jsize,
                                                                           len:
                                                                               jsize,
                                                                           buf:
                                                                               *mut jchar)
                                                          -> ()>,
        pub GetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            array:
                                                                                jshortArray,
                                                                            start:
                                                                                jsize,
                                                                            len:
                                                                                jsize,
                                                                            buf:
                                                                                *mut jshort)
                                                           -> ()>,
        pub GetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jintArray,
                                                                          start:
                                                                              jsize,
                                                                          len:
                                                                              jsize,
                                                                          buf:
                                                                              *mut jint)
                                                         -> ()>,
        pub GetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jlongArray,
                                                                           start:
                                                                               jsize,
                                                                           len:
                                                                               jsize,
                                                                           buf:
                                                                               *mut jlong)
                                                          -> ()>,
        pub GetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            array:
                                                                                jfloatArray,
                                                                            start:
                                                                                jsize,
                                                                            len:
                                                                                jsize,
                                                                            buf:
                                                                                *mut jfloat)
                                                           -> ()>,
        pub GetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jdoubleArray,
                                                                             start:
                                                                                 jsize,
                                                                             len:
                                                                                 jsize,
                                                                             buf:
                                                                                 *mut jdouble)
                                                            -> ()>,
        pub SetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jbooleanArray,
                                                                              start:
                                                                                  jsize,
                                                                              l:
                                                                                  jsize,
                                                                              buf:
                                                                                  *const jboolean)
                                                             -> ()>,
        pub SetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jbyteArray,
                                                                           start:
                                                                               jsize,
                                                                           len:
                                                                               jsize,
                                                                           buf:
                                                                               *const jbyte)
                                                          -> ()>,
        pub SetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jcharArray,
                                                                           start:
                                                                               jsize,
                                                                           len:
                                                                               jsize,
                                                                           buf:
                                                                               *const jchar)
                                                          -> ()>,
        pub SetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            array:
                                                                                jshortArray,
                                                                            start:
                                                                                jsize,
                                                                            len:
                                                                                jsize,
                                                                            buf:
                                                                                *const jshort)
                                                           -> ()>,
        pub SetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jintArray,
                                                                          start:
                                                                              jsize,
                                                                          len:
                                                                              jsize,
                                                                          buf:
                                                                              *const jint)
                                                         -> ()>,
        pub SetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jlongArray,
                                                                           start:
                                                                               jsize,
                                                                           len:
                                                                               jsize,
                                                                           buf:
                                                                               *const jlong)
                                                          -> ()>,
        pub SetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            array:
                                                                                jfloatArray,
                                                                            start:
                                                                                jsize,
                                                                            len:
                                                                                jsize,
                                                                            buf:
                                                                                *const jfloat)
                                                           -> ()>,
        pub SetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jdoubleArray,
                                                                             start:
                                                                                 jsize,
                                                                             len:
                                                                                 jsize,
                                                                             buf:
                                                                                 *const jdouble)
                                                            -> ()>,
        pub RegisterNatives: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        clazz:
                                                                            jclass,
                                                                        methods:
                                                                            *const JNINativeMethod,
                                                                        nMethods:
                                                                            jint)
                                                       -> jint>,
        pub UnregisterNatives: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass)
                                                         -> jint>,
        pub MonitorEnter: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj: jobject)
                                                    -> jint>,
        pub MonitorExit: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj: jobject)
                                                   -> jint>,
        pub GetJavaVM: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  vm:
                                                                      *mut *mut JavaVM)
                                                 -> jint>,
        pub GetStringRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        str:
                                                                            jstring,
                                                                        start:
                                                                            jsize,
                                                                        len:
                                                                            jsize,
                                                                        buf:
                                                                            *mut jchar)
                                                       -> ()>,
        pub GetStringUTFRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           str:
                                                                               jstring,
                                                                           start:
                                                                               jsize,
                                                                           len:
                                                                               jsize,
                                                                           buf:
                                                                               *mut ::libc::c_char)
                                                          -> ()>,
        pub GetPrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  array:
                                                                                      jarray,
                                                                                  isCopy:
                                                                                      *mut jboolean)
                                                                 ->
                                                                     *mut ::libc::c_void>,
        pub ReleasePrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                          *mut JNIEnv,
                                                                                      array:
                                                                                          jarray,
                                                                                      carray:
                                                                                          *mut ::libc::c_void,
                                                                                      mode:
                                                                                          jint)
                                                                     -> ()>,
        pub GetStringCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          string:
                                                                              jstring,
                                                                          isCopy:
                                                                              *mut jboolean)
                                                         -> *const jchar>,
        pub ReleaseStringCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              string:
                                                                                  jstring,
                                                                              cstring:
                                                                                  *const jchar)
                                                             -> ()>,
        pub NewWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject)
                                                        -> jweak>,
        pub DeleteWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            _ref:
                                                                                jweak)
                                                           -> ()>,
        pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv)
                                                      -> jboolean>,
        pub NewDirectByteBuffer: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            address:
                                                                                *mut ::libc::c_void,
                                                                            capacity:
                                                                                jlong)
                                                           -> jobject>,
        pub GetDirectBufferAddress: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               buf:
                                                                                   jobject)
                                                              ->
                                                                  *mut ::libc::c_void>,
        pub GetDirectBufferCapacity: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                buf:
                                                                                    jobject)
                                                               -> jlong>,
        pub GetObjectRefType: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject)
                                                        -> jobjectRefType>,
    }
    impl ::std::clone::Clone for Struct_JNINativeInterface_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JNINativeInterface_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JNIEnv_ {
        pub functions: *const Struct_JNINativeInterface_,
    }
    impl ::std::clone::Clone for Struct_JNIEnv_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JNIEnv_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVMOption {
        pub optionString: *mut ::libc::c_char,
        pub extraInfo: *mut ::libc::c_void,
    }
    impl ::std::clone::Clone for Struct_JavaVMOption {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVMOption {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JavaVMOption = Struct_JavaVMOption;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVMInitArgs {
        pub version: jint,
        pub nOptions: jint,
        pub options: *mut JavaVMOption,
        pub ignoreUnrecognized: jboolean,
    }
    impl ::std::clone::Clone for Struct_JavaVMInitArgs {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVMInitArgs {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JavaVMInitArgs = Struct_JavaVMInitArgs;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVMAttachArgs {
        pub version: jint,
        pub name: *mut ::libc::c_char,
        pub group: jobject,
    }
    impl ::std::clone::Clone for Struct_JavaVMAttachArgs {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVMAttachArgs {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type JavaVMAttachArgs = Struct_JavaVMAttachArgs;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JNIInvokeInterface_ {
        pub reserved0: *mut ::libc::c_void,
        pub reserved1: *mut ::libc::c_void,
        pub reserved2: *mut ::libc::c_void,

        pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(vm: *mut JavaVM) -> jint>,
        pub AttachCurrentThread: ::std::option::Option<unsafe extern "C" fn(vm:
                                                                                *mut JavaVM,
                                                                            penv:
                                                                                *mut *mut ::libc::c_void,
                                                                            args:
                                                                                *mut ::libc::c_void)
                                                           -> jint>,
        pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(vm:
                                                                                *mut JavaVM)
                                                           -> jint>,
        pub GetEnv: ::std::option::Option<unsafe extern "C" fn(vm: *mut JavaVM,
                                                               penv:
                                                                   *mut *mut ::libc::c_void,
                                                               version: jint)
                                              -> jint>,
        pub AttachCurrentThreadAsDaemon: ::std::option::Option<unsafe extern "C" fn(vm:
                                                                                        *mut JavaVM,
                                                                                    penv:
                                                                                        *mut *mut ::libc::c_void,
                                                                                    args:
                                                                                        *mut ::libc::c_void)
                                                                   -> jint>,
    }
    impl ::std::clone::Clone for Struct_JNIInvokeInterface_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JNIInvokeInterface_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_JavaVM_ {
        pub functions: *const Struct_JNIInvokeInterface_,
    }
    impl ::std::clone::Clone for Struct_JavaVM_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_JavaVM_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type Enum_Unnamed3 = ::libc::c_uint;
    pub const JVMTI_VERSION_1: ::libc::c_uint = 805371904;
    pub const JVMTI_VERSION_1_0: ::libc::c_uint = 805371904;
    pub const JVMTI_VERSION_1_1: ::libc::c_uint = 805372160;
    pub const JVMTI_VERSION_1_2: ::libc::c_uint = 805372416;
    pub const JVMTI_VERSION: ::libc::c_int = 805372417;
    pub type jvmtiEnv = *const Struct_jvmtiInterface_1_;
    pub type jthread = jobject;
    pub type jthreadGroup = jobject;
    pub type jlocation = jlong;
    pub enum Struct__jrawMonitorID { }
    pub type jrawMonitorID = *mut Struct__jrawMonitorID;
    pub type jniNativeInterface = Struct_JNINativeInterface_;
    pub type Enum_Unnamed4 = ::libc::c_uint;
    pub const JVMTI_THREAD_STATE_ALIVE: ::libc::c_uint = 1;
    pub const JVMTI_THREAD_STATE_TERMINATED: ::libc::c_uint = 2;
    pub const JVMTI_THREAD_STATE_RUNNABLE: ::libc::c_uint = 4;
    pub const JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER: ::libc::c_uint = 1024;
    pub const JVMTI_THREAD_STATE_WAITING: ::libc::c_uint = 128;
    pub const JVMTI_THREAD_STATE_WAITING_INDEFINITELY: ::libc::c_uint = 16;
    pub const JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT: ::libc::c_uint = 32;
    pub const JVMTI_THREAD_STATE_SLEEPING: ::libc::c_uint = 64;
    pub const JVMTI_THREAD_STATE_IN_OBJECT_WAIT: ::libc::c_uint = 256;
    pub const JVMTI_THREAD_STATE_PARKED: ::libc::c_uint = 512;
    pub const JVMTI_THREAD_STATE_SUSPENDED: ::libc::c_uint = 1048576;
    pub const JVMTI_THREAD_STATE_INTERRUPTED: ::libc::c_uint = 2097152;
    pub const JVMTI_THREAD_STATE_IN_NATIVE: ::libc::c_uint = 4194304;
    pub const JVMTI_THREAD_STATE_VENDOR_1: ::libc::c_uint = 268435456;
    pub const JVMTI_THREAD_STATE_VENDOR_2: ::libc::c_uint = 536870912;
    pub const JVMTI_THREAD_STATE_VENDOR_3: ::libc::c_uint = 1073741824;
    pub type Enum_Unnamed5 = ::libc::c_uint;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_MASK: ::libc::c_uint = 1207;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_NEW: ::libc::c_uint = 0;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED: ::libc::c_uint = 2;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE: ::libc::c_uint = 5;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED: ::libc::c_uint = 1025;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_WAITING: ::libc::c_uint = 145;
    pub const JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING: ::libc::c_uint = 161;
    pub type Enum_Unnamed6 = ::libc::c_uint;
    pub const JVMTI_THREAD_MIN_PRIORITY: ::libc::c_uint = 1;
    pub const JVMTI_THREAD_NORM_PRIORITY: ::libc::c_uint = 5;
    pub const JVMTI_THREAD_MAX_PRIORITY: ::libc::c_uint = 10;
    pub type Enum_Unnamed7 = ::libc::c_uint;
    pub const JVMTI_HEAP_FILTER_TAGGED: ::libc::c_uint = 4;
    pub const JVMTI_HEAP_FILTER_UNTAGGED: ::libc::c_uint = 8;
    pub const JVMTI_HEAP_FILTER_CLASS_TAGGED: ::libc::c_uint = 16;
    pub const JVMTI_HEAP_FILTER_CLASS_UNTAGGED: ::libc::c_uint = 32;
    pub type Enum_Unnamed8 = ::libc::c_uint;
    pub const JVMTI_VISIT_OBJECTS: ::libc::c_uint = 256;
    pub const JVMTI_VISIT_ABORT: ::libc::c_uint = 32768;
    pub type Enum_Unnamed9 = ::libc::c_uint;
    pub const JVMTI_HEAP_REFERENCE_CLASS: ::libc::c_uint = 1;
    pub const JVMTI_HEAP_REFERENCE_FIELD: ::libc::c_uint = 2;
    pub const JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT: ::libc::c_uint = 3;
    pub const JVMTI_HEAP_REFERENCE_CLASS_LOADER: ::libc::c_uint = 4;
    pub const JVMTI_HEAP_REFERENCE_SIGNERS: ::libc::c_uint = 5;
    pub const JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN: ::libc::c_uint = 6;
    pub const JVMTI_HEAP_REFERENCE_INTERFACE: ::libc::c_uint = 7;
    pub const JVMTI_HEAP_REFERENCE_STATIC_FIELD: ::libc::c_uint = 8;
    pub const JVMTI_HEAP_REFERENCE_CONSTANT_POOL: ::libc::c_uint = 9;
    pub const JVMTI_HEAP_REFERENCE_SUPERCLASS: ::libc::c_uint = 10;
    pub const JVMTI_HEAP_REFERENCE_JNI_GLOBAL: ::libc::c_uint = 21;
    pub const JVMTI_HEAP_REFERENCE_SYSTEM_CLASS: ::libc::c_uint = 22;
    pub const JVMTI_HEAP_REFERENCE_MONITOR: ::libc::c_uint = 23;
    pub const JVMTI_HEAP_REFERENCE_STACK_LOCAL: ::libc::c_uint = 24;
    pub const JVMTI_HEAP_REFERENCE_JNI_LOCAL: ::libc::c_uint = 25;
    pub const JVMTI_HEAP_REFERENCE_THREAD: ::libc::c_uint = 26;
    pub const JVMTI_HEAP_REFERENCE_OTHER: ::libc::c_uint = 27;
    pub type jvmtiHeapReferenceKind = Enum_Unnamed9;
    pub type Enum_Unnamed10 = ::libc::c_uint;
    pub const JVMTI_PRIMITIVE_TYPE_BOOLEAN: ::libc::c_uint = 90;
    pub const JVMTI_PRIMITIVE_TYPE_BYTE: ::libc::c_uint = 66;
    pub const JVMTI_PRIMITIVE_TYPE_CHAR: ::libc::c_uint = 67;
    pub const JVMTI_PRIMITIVE_TYPE_SHORT: ::libc::c_uint = 83;
    pub const JVMTI_PRIMITIVE_TYPE_INT: ::libc::c_uint = 73;
    pub const JVMTI_PRIMITIVE_TYPE_LONG: ::libc::c_uint = 74;
    pub const JVMTI_PRIMITIVE_TYPE_FLOAT: ::libc::c_uint = 70;
    pub const JVMTI_PRIMITIVE_TYPE_DOUBLE: ::libc::c_uint = 68;
    pub type jvmtiPrimitiveType = Enum_Unnamed10;
    pub type Enum_Unnamed11 = ::libc::c_uint;
    pub const JVMTI_HEAP_OBJECT_TAGGED: ::libc::c_uint = 1;
    pub const JVMTI_HEAP_OBJECT_UNTAGGED: ::libc::c_uint = 2;
    pub const JVMTI_HEAP_OBJECT_EITHER: ::libc::c_uint = 3;
    pub type jvmtiHeapObjectFilter = Enum_Unnamed11;
    pub type Enum_Unnamed12 = ::libc::c_uint;
    pub const JVMTI_HEAP_ROOT_JNI_GLOBAL: ::libc::c_uint = 1;
    pub const JVMTI_HEAP_ROOT_SYSTEM_CLASS: ::libc::c_uint = 2;
    pub const JVMTI_HEAP_ROOT_MONITOR: ::libc::c_uint = 3;
    pub const JVMTI_HEAP_ROOT_STACK_LOCAL: ::libc::c_uint = 4;
    pub const JVMTI_HEAP_ROOT_JNI_LOCAL: ::libc::c_uint = 5;
    pub const JVMTI_HEAP_ROOT_THREAD: ::libc::c_uint = 6;
    pub const JVMTI_HEAP_ROOT_OTHER: ::libc::c_uint = 7;
    pub type jvmtiHeapRootKind = Enum_Unnamed12;
    pub type Enum_Unnamed13 = ::libc::c_uint;
    pub const JVMTI_REFERENCE_CLASS: ::libc::c_uint = 1;
    pub const JVMTI_REFERENCE_FIELD: ::libc::c_uint = 2;
    pub const JVMTI_REFERENCE_ARRAY_ELEMENT: ::libc::c_uint = 3;
    pub const JVMTI_REFERENCE_CLASS_LOADER: ::libc::c_uint = 4;
    pub const JVMTI_REFERENCE_SIGNERS: ::libc::c_uint = 5;
    pub const JVMTI_REFERENCE_PROTECTION_DOMAIN: ::libc::c_uint = 6;
    pub const JVMTI_REFERENCE_INTERFACE: ::libc::c_uint = 7;
    pub const JVMTI_REFERENCE_STATIC_FIELD: ::libc::c_uint = 8;
    pub const JVMTI_REFERENCE_CONSTANT_POOL: ::libc::c_uint = 9;
    pub type jvmtiObjectReferenceKind = Enum_Unnamed13;
    pub type Enum_Unnamed14 = ::libc::c_uint;
    pub const JVMTI_ITERATION_CONTINUE: ::libc::c_uint = 1;
    pub const JVMTI_ITERATION_IGNORE: ::libc::c_uint = 2;
    pub const JVMTI_ITERATION_ABORT: ::libc::c_uint = 0;
    pub type jvmtiIterationControl = Enum_Unnamed14;
    pub type Enum_Unnamed15 = ::libc::c_uint;
    pub const JVMTI_CLASS_STATUS_VERIFIED: ::libc::c_uint = 1;
    pub const JVMTI_CLASS_STATUS_PREPARED: ::libc::c_uint = 2;
    pub const JVMTI_CLASS_STATUS_INITIALIZED: ::libc::c_uint = 4;
    pub const JVMTI_CLASS_STATUS_ERROR: ::libc::c_uint = 8;
    pub const JVMTI_CLASS_STATUS_ARRAY: ::libc::c_uint = 16;
    pub const JVMTI_CLASS_STATUS_PRIMITIVE: ::libc::c_uint = 32;
    pub type Enum_Unnamed16 = ::libc::c_uint;
    pub const JVMTI_ENABLE: ::libc::c_uint = 1;
    pub const JVMTI_DISABLE: ::libc::c_uint = 0;
    pub type jvmtiEventMode = Enum_Unnamed16;
    pub type Enum_Unnamed17 = ::libc::c_uint;
    pub const JVMTI_TYPE_JBYTE: ::libc::c_uint = 101;
    pub const JVMTI_TYPE_JCHAR: ::libc::c_uint = 102;
    pub const JVMTI_TYPE_JSHORT: ::libc::c_uint = 103;
    pub const JVMTI_TYPE_JINT: ::libc::c_uint = 104;
    pub const JVMTI_TYPE_JLONG: ::libc::c_uint = 105;
    pub const JVMTI_TYPE_JFLOAT: ::libc::c_uint = 106;
    pub const JVMTI_TYPE_JDOUBLE: ::libc::c_uint = 107;
    pub const JVMTI_TYPE_JBOOLEAN: ::libc::c_uint = 108;
    pub const JVMTI_TYPE_JOBJECT: ::libc::c_uint = 109;
    pub const JVMTI_TYPE_JTHREAD: ::libc::c_uint = 110;
    pub const JVMTI_TYPE_JCLASS: ::libc::c_uint = 111;
    pub const JVMTI_TYPE_JVALUE: ::libc::c_uint = 112;
    pub const JVMTI_TYPE_JFIELDID: ::libc::c_uint = 113;
    pub const JVMTI_TYPE_JMETHODID: ::libc::c_uint = 114;
    pub const JVMTI_TYPE_CCHAR: ::libc::c_uint = 115;
    pub const JVMTI_TYPE_CVOID: ::libc::c_uint = 116;
    pub const JVMTI_TYPE_JNIENV: ::libc::c_uint = 117;
    pub type jvmtiParamTypes = Enum_Unnamed17;
    pub type Enum_Unnamed18 = ::libc::c_uint;
    pub const JVMTI_KIND_IN: ::libc::c_uint = 91;
    pub const JVMTI_KIND_IN_PTR: ::libc::c_uint = 92;
    pub const JVMTI_KIND_IN_BUF: ::libc::c_uint = 93;
    pub const JVMTI_KIND_ALLOC_BUF: ::libc::c_uint = 94;
    pub const JVMTI_KIND_ALLOC_ALLOC_BUF: ::libc::c_uint = 95;
    pub const JVMTI_KIND_OUT: ::libc::c_uint = 96;
    pub const JVMTI_KIND_OUT_BUF: ::libc::c_uint = 97;
    pub type jvmtiParamKind = Enum_Unnamed18;
    pub type Enum_Unnamed19 = ::libc::c_uint;
    pub const JVMTI_TIMER_USER_CPU: ::libc::c_uint = 30;
    pub const JVMTI_TIMER_TOTAL_CPU: ::libc::c_uint = 31;
    pub const JVMTI_TIMER_ELAPSED: ::libc::c_uint = 32;
    pub type jvmtiTimerKind = Enum_Unnamed19;
    pub type Enum_Unnamed20 = ::libc::c_uint;
    pub const JVMTI_PHASE_ONLOAD: ::libc::c_uint = 1;
    pub const JVMTI_PHASE_PRIMORDIAL: ::libc::c_uint = 2;
    pub const JVMTI_PHASE_START: ::libc::c_uint = 6;
    pub const JVMTI_PHASE_LIVE: ::libc::c_uint = 4;
    pub const JVMTI_PHASE_DEAD: ::libc::c_uint = 8;
    pub type jvmtiPhase = Enum_Unnamed20;
    pub type Enum_Unnamed21 = ::libc::c_uint;
    pub const JVMTI_VERSION_INTERFACE_JNI: ::libc::c_uint = 0;
    pub const JVMTI_VERSION_INTERFACE_JVMTI: ::libc::c_uint = 805306368;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed22 = ::libc::c_uint;
    pub const JVMTI_VERSION_MASK_INTERFACE_TYPE: ::libc::c_uint = 1879048192;
    pub const JVMTI_VERSION_MASK_MAJOR: ::libc::c_uint = 268369920;
    pub const JVMTI_VERSION_MASK_MINOR: ::libc::c_uint = 65280;
    pub const JVMTI_VERSION_MASK_MICRO: ::libc::c_uint = 255;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed23 = ::libc::c_uint;
    pub const JVMTI_VERSION_SHIFT_MAJOR: ::libc::c_uint = 16;
    pub const JVMTI_VERSION_SHIFT_MINOR: ::libc::c_uint = 8;
    pub const JVMTI_VERSION_SHIFT_MICRO: ::libc::c_uint = 0;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed24 = ::libc::c_uint;
    pub const JVMTI_VERBOSE_OTHER: ::libc::c_uint = 0;
    pub const JVMTI_VERBOSE_GC: ::libc::c_uint = 1;
    pub const JVMTI_VERBOSE_CLASS: ::libc::c_uint = 2;
    pub const JVMTI_VERBOSE_JNI: ::libc::c_uint = 4;
    #[allow(non_camel_case_types)]
    pub type jvmtiVerboseFlag = Enum_Unnamed24;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed25 = ::libc::c_uint;
    pub const JVMTI_JLOCATION_JVMBCI: ::libc::c_uint = 1;
    pub const JVMTI_JLOCATION_MACHINEPC: ::libc::c_uint = 2;
    pub const JVMTI_JLOCATION_OTHER: ::libc::c_uint = 0;
    #[allow(non_camel_case_types)]
    pub type jvmtiJlocationFormat = Enum_Unnamed25;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed26 = ::libc::c_uint;
    pub const JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR: ::libc::c_uint = 1;
    pub const JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP: ::libc::c_uint = 2;
    pub const JVMTI_RESOURCE_EXHAUSTED_THREADS: ::libc::c_uint = 4;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed27 = ::libc::c_uint;
    pub const JVMTI_ERROR_NONE: ::libc::c_uint = 0;
    pub const JVMTI_ERROR_INVALID_THREAD: ::libc::c_uint = 10;
    pub const JVMTI_ERROR_INVALID_THREAD_GROUP: ::libc::c_uint = 11;
    pub const JVMTI_ERROR_INVALID_PRIORITY: ::libc::c_uint = 12;
    pub const JVMTI_ERROR_THREAD_NOT_SUSPENDED: ::libc::c_uint = 13;
    pub const JVMTI_ERROR_THREAD_SUSPENDED: ::libc::c_uint = 14;
    pub const JVMTI_ERROR_THREAD_NOT_ALIVE: ::libc::c_uint = 15;
    pub const JVMTI_ERROR_INVALID_OBJECT: ::libc::c_uint = 20;
    pub const JVMTI_ERROR_INVALID_CLASS: ::libc::c_uint = 21;
    pub const JVMTI_ERROR_CLASS_NOT_PREPARED: ::libc::c_uint = 22;
    pub const JVMTI_ERROR_INVALID_METHODID: ::libc::c_uint = 23;
    pub const JVMTI_ERROR_INVALID_LOCATION: ::libc::c_uint = 24;
    pub const JVMTI_ERROR_INVALID_FIELDID: ::libc::c_uint = 25;
    pub const JVMTI_ERROR_NO_MORE_FRAMES: ::libc::c_uint = 31;
    pub const JVMTI_ERROR_OPAQUE_FRAME: ::libc::c_uint = 32;
    pub const JVMTI_ERROR_TYPE_MISMATCH: ::libc::c_uint = 34;
    pub const JVMTI_ERROR_INVALID_SLOT: ::libc::c_uint = 35;
    pub const JVMTI_ERROR_DUPLICATE: ::libc::c_uint = 40;
    pub const JVMTI_ERROR_NOT_FOUND: ::libc::c_uint = 41;
    pub const JVMTI_ERROR_INVALID_MONITOR: ::libc::c_uint = 50;
    pub const JVMTI_ERROR_NOT_MONITOR_OWNER: ::libc::c_uint = 51;
    pub const JVMTI_ERROR_INTERRUPT: ::libc::c_uint = 52;
    pub const JVMTI_ERROR_INVALID_CLASS_FORMAT: ::libc::c_uint = 60;
    pub const JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION: ::libc::c_uint = 61;
    pub const JVMTI_ERROR_FAILS_VERIFICATION: ::libc::c_uint = 62;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED: ::libc::c_uint =
        63;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED: ::libc::c_uint
              =
        64;
    pub const JVMTI_ERROR_INVALID_TYPESTATE: ::libc::c_uint = 65;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED:
              ::libc::c_uint =
        66;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED: ::libc::c_uint
              =
        67;
    pub const JVMTI_ERROR_UNSUPPORTED_VERSION: ::libc::c_uint = 68;
    pub const JVMTI_ERROR_NAMES_DONT_MATCH: ::libc::c_uint = 69;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED:
              ::libc::c_uint =
        70;
    pub const JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED:
              ::libc::c_uint =
        71;
    pub const JVMTI_ERROR_UNMODIFIABLE_CLASS: ::libc::c_uint = 79;
    pub const JVMTI_ERROR_NOT_AVAILABLE: ::libc::c_uint = 98;
    pub const JVMTI_ERROR_MUST_POSSESS_CAPABILITY: ::libc::c_uint = 99;
    pub const JVMTI_ERROR_NULL_POINTER: ::libc::c_uint = 100;
    pub const JVMTI_ERROR_ABSENT_INFORMATION: ::libc::c_uint = 101;
    pub const JVMTI_ERROR_INVALID_EVENT_TYPE: ::libc::c_uint = 102;
    pub const JVMTI_ERROR_ILLEGAL_ARGUMENT: ::libc::c_uint = 103;
    pub const JVMTI_ERROR_NATIVE_METHOD: ::libc::c_uint = 104;
    pub const JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED: ::libc::c_uint = 106;
    pub const JVMTI_ERROR_OUT_OF_MEMORY: ::libc::c_uint = 110;
    pub const JVMTI_ERROR_ACCESS_DENIED: ::libc::c_uint = 111;
    pub const JVMTI_ERROR_WRONG_PHASE: ::libc::c_uint = 112;
    pub const JVMTI_ERROR_INTERNAL: ::libc::c_uint = 113;
    pub const JVMTI_ERROR_UNATTACHED_THREAD: ::libc::c_uint = 115;
    pub const JVMTI_ERROR_INVALID_ENVIRONMENT: ::libc::c_uint = 116;
    pub const JVMTI_ERROR_MAX: ::libc::c_uint = 116;
    #[allow(non_camel_case_types)]
    pub type jvmtiError = Enum_Unnamed27;
    #[allow(non_camel_case_types)]
    pub type Enum_Unnamed28 = ::libc::c_uint;
    pub const JVMTI_MIN_EVENT_TYPE_VAL: ::libc::c_uint = 50;
    pub const JVMTI_EVENT_VM_INIT: ::libc::c_uint = 50;
    pub const JVMTI_EVENT_VM_DEATH: ::libc::c_uint = 51;
    pub const JVMTI_EVENT_THREAD_START: ::libc::c_uint = 52;
    pub const JVMTI_EVENT_THREAD_END: ::libc::c_uint = 53;
    pub const JVMTI_EVENT_CLASS_FILE_LOAD_HOOK: ::libc::c_uint = 54;
    pub const JVMTI_EVENT_CLASS_LOAD: ::libc::c_uint = 55;
    pub const JVMTI_EVENT_CLASS_PREPARE: ::libc::c_uint = 56;
    pub const JVMTI_EVENT_VM_START: ::libc::c_uint = 57;
    pub const JVMTI_EVENT_EXCEPTION: ::libc::c_uint = 58;
    pub const JVMTI_EVENT_EXCEPTION_CATCH: ::libc::c_uint = 59;
    pub const JVMTI_EVENT_SINGLE_STEP: ::libc::c_uint = 60;
    pub const JVMTI_EVENT_FRAME_POP: ::libc::c_uint = 61;
    pub const JVMTI_EVENT_BREAKPOINT: ::libc::c_uint = 62;
    pub const JVMTI_EVENT_FIELD_ACCESS: ::libc::c_uint = 63;
    pub const JVMTI_EVENT_FIELD_MODIFICATION: ::libc::c_uint = 64;
    pub const JVMTI_EVENT_METHOD_ENTRY: ::libc::c_uint = 65;
    pub const JVMTI_EVENT_METHOD_EXIT: ::libc::c_uint = 66;
    pub const JVMTI_EVENT_NATIVE_METHOD_BIND: ::libc::c_uint = 67;
    pub const JVMTI_EVENT_COMPILED_METHOD_LOAD: ::libc::c_uint = 68;
    pub const JVMTI_EVENT_COMPILED_METHOD_UNLOAD: ::libc::c_uint = 69;
    pub const JVMTI_EVENT_DYNAMIC_CODE_GENERATED: ::libc::c_uint = 70;
    pub const JVMTI_EVENT_DATA_DUMP_REQUEST: ::libc::c_uint = 71;
    pub const JVMTI_EVENT_MONITOR_WAIT: ::libc::c_uint = 73;
    pub const JVMTI_EVENT_MONITOR_WAITED: ::libc::c_uint = 74;
    pub const JVMTI_EVENT_MONITOR_CONTENDED_ENTER: ::libc::c_uint = 75;
    pub const JVMTI_EVENT_MONITOR_CONTENDED_ENTERED: ::libc::c_uint = 76;
    pub const JVMTI_EVENT_RESOURCE_EXHAUSTED: ::libc::c_uint = 80;
    pub const JVMTI_EVENT_GARBAGE_COLLECTION_START: ::libc::c_uint = 81;
    pub const JVMTI_EVENT_GARBAGE_COLLECTION_FINISH: ::libc::c_uint = 82;
    pub const JVMTI_EVENT_OBJECT_FREE: ::libc::c_uint = 83;
    pub const JVMTI_EVENT_VM_OBJECT_ALLOC: ::libc::c_uint = 84;
    pub const JVMTI_MAX_EVENT_TYPE_VAL: ::libc::c_uint = 84;
    #[allow(non_camel_case_types)]
    pub type jvmtiEvent = Enum_Unnamed28;
    #[allow(non_camel_case_types)]
    pub type jvmtiThreadInfo = Struct__jvmtiThreadInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiMonitorStackDepthInfo = Struct__jvmtiMonitorStackDepthInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiThreadGroupInfo = Struct__jvmtiThreadGroupInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiFrameInfo = Struct__jvmtiFrameInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiStackInfo = Struct__jvmtiStackInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoField = Struct__jvmtiHeapReferenceInfoField;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoArray = Struct__jvmtiHeapReferenceInfoArray;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoConstantPool =
        Struct__jvmtiHeapReferenceInfoConstantPool;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoStackLocal =
        Struct__jvmtiHeapReferenceInfoStackLocal;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoJniLocal =
        Struct__jvmtiHeapReferenceInfoJniLocal;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfoReserved =
        Struct__jvmtiHeapReferenceInfoReserved;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceInfo = Union__jvmtiHeapReferenceInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapCallbacks = Struct__jvmtiHeapCallbacks;
    #[allow(non_camel_case_types)]
    pub type jvmtiClassDefinition = Struct__jvmtiClassDefinition;
    #[allow(non_camel_case_types)]
    pub type jvmtiMonitorUsage = Struct__jvmtiMonitorUsage;
    #[allow(non_camel_case_types)]
    pub type jvmtiLineNumberEntry = Struct__jvmtiLineNumberEntry;
    #[allow(non_camel_case_types)]
    pub type jvmtiLocalVariableEntry = Struct__jvmtiLocalVariableEntry;
    #[allow(non_camel_case_types)]
    pub type jvmtiParamInfo = Struct__jvmtiParamInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionFunctionInfo = Struct__jvmtiExtensionFunctionInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionEventInfo = Struct__jvmtiExtensionEventInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiTimerInfo = Struct__jvmtiTimerInfo;
    #[allow(non_camel_case_types)]
    pub type jvmtiAddrLocationMap = Struct__jvmtiAddrLocationMap;
    #[allow(non_camel_case_types)]
    pub type jvmtiStartFunction =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   arg: *mut ::libc::c_void)
                                  -> ()>;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapIterationCallback =
        ::std::option::Option<unsafe extern "C" fn(class_tag: jlong, size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   length: jint,
                                                   user_data: *mut ::libc::c_void)
                                  -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapReferenceCallback =
        ::std::option::Option<unsafe extern "C" fn(reference_kind:
                                                       jvmtiHeapReferenceKind,
                                                   reference_info:
                                                       *const jvmtiHeapReferenceInfo,
                                                   class_tag: jlong,
                                                   referrer_class_tag: jlong,
                                                   size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   referrer_tag_ptr: *mut jlong,
                                                   length: jint,
                                                   user_data: *mut ::libc::c_void)
                                  -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiPrimitiveFieldCallback =
        ::std::option::Option<unsafe extern "C" fn(kind: jvmtiHeapReferenceKind,
                                                   info:
                                                       *const jvmtiHeapReferenceInfo,
                                                   object_class_tag: jlong,
                                                   object_tag_ptr: *mut jlong,
                                                   value: jvalue,
                                                   value_type: jvmtiPrimitiveType,
                                                   user_data: *mut ::libc::c_void)
                                  -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiArrayPrimitiveValueCallback =
        ::std::option::Option<unsafe extern "C" fn(class_tag: jlong, size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   element_count: jint,
                                                   element_type:
                                                       jvmtiPrimitiveType,
                                                   elements:
                                                       *const ::libc::c_void,
                                                   user_data: *mut ::libc::c_void)
                                  -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiStringPrimitiveValueCallback =
        ::std::option::Option<unsafe extern "C" fn(class_tag: jlong, size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   value: *const jchar,
                                                   value_length: jint,
                                                   user_data: *mut ::libc::c_void)
                                  -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiReservedCallback =
        ::std::option::Option<extern "C" fn() -> jint>;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapObjectCallback =
        ::std::option::Option<unsafe extern "C" fn(class_tag: jlong, size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   user_data: *mut ::libc::c_void)
                                  -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiHeapRootCallback =
        ::std::option::Option<unsafe extern "C" fn(root_kind: jvmtiHeapRootKind,
                                                   class_tag: jlong, size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   user_data: *mut ::libc::c_void)
                                  -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiStackReferenceCallback =
        ::std::option::Option<unsafe extern "C" fn(root_kind: jvmtiHeapRootKind,
                                                   class_tag: jlong, size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   thread_tag: jlong, depth: jint,
                                                   method: jmethodID, slot: jint,
                                                   user_data: *mut ::libc::c_void)
                                  -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiObjectReferenceCallback =
        ::std::option::Option<unsafe extern "C" fn(reference_kind:
                                                       jvmtiObjectReferenceKind,
                                                   class_tag: jlong, size: jlong,
                                                   tag_ptr: *mut jlong,
                                                   referrer_tag: jlong,
                                                   referrer_index: jint,
                                                   user_data: *mut ::libc::c_void)
                                  -> jvmtiIterationControl>;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionFunction =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...)
                                  -> jvmtiError>;
    #[allow(non_camel_case_types)]
    pub type jvmtiExtensionEvent =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...)
                                  -> ()>;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiThreadInfo {
        pub name: *mut ::libc::c_char,
        pub priority: jint,
        pub is_daemon: jboolean,
        pub thread_group: jthreadGroup,
        pub context_class_loader: jobject,
    }
    impl ::std::clone::Clone for Struct__jvmtiThreadInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiThreadInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiMonitorStackDepthInfo {
        pub monitor: jobject,
        pub stack_depth: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiMonitorStackDepthInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiMonitorStackDepthInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiThreadGroupInfo {
        pub parent: jthreadGroup,
        pub name: *mut ::libc::c_char,
        pub max_priority: jint,
        pub is_daemon: jboolean,
    }
    impl ::std::clone::Clone for Struct__jvmtiThreadGroupInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiThreadGroupInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiFrameInfo {
        pub method: jmethodID,
        pub location: jlocation,
    }
    impl ::std::clone::Clone for Struct__jvmtiFrameInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiFrameInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiStackInfo {
        pub thread: jthread,
        pub state: jint,
        pub frame_buffer: *mut jvmtiFrameInfo,
        pub frame_count: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiStackInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiStackInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoField {
        pub index: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoField {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoField {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoArray {
        pub index: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoArray {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoArray {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoConstantPool {
        pub index: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoConstantPool {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoConstantPool {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoStackLocal {
        pub thread_tag: jlong,
        pub thread_id: jlong,
        pub depth: jint,
        pub method: jmethodID,
        pub location: jlocation,
        pub slot: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoStackLocal {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoStackLocal {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoJniLocal {
        pub thread_tag: jlong,
        pub thread_id: jlong,
        pub depth: jint,
        pub method: jmethodID,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoJniLocal {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoJniLocal {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapReferenceInfoReserved {
        pub reserved1: jlong,
        pub reserved2: jlong,
        pub reserved3: jlong,
        pub reserved4: jlong,
        pub reserved5: jlong,
        pub reserved6: jlong,
        pub reserved7: jlong,
        pub reserved8: jlong,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapReferenceInfoReserved {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapReferenceInfoReserved {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Union__jvmtiHeapReferenceInfo {
        pub _bindgen_data_: [u64; 8usize],
    }
    impl Union__jvmtiHeapReferenceInfo {
        pub unsafe fn field(&mut self) -> *mut jvmtiHeapReferenceInfoField {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn array(&mut self) -> *mut jvmtiHeapReferenceInfoArray {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn constant_pool(&mut self)
         -> *mut jvmtiHeapReferenceInfoConstantPool {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn stack_local(&mut self)
         -> *mut jvmtiHeapReferenceInfoStackLocal {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn jni_local(&mut self)
         -> *mut jvmtiHeapReferenceInfoJniLocal {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
        pub unsafe fn other(&mut self) -> *mut jvmtiHeapReferenceInfoReserved {
            let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
            ::std::mem::transmute(raw.offset(0))
        }
    }
    impl ::std::clone::Clone for Union__jvmtiHeapReferenceInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Union__jvmtiHeapReferenceInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiHeapCallbacks {
        pub heap_iteration_callback: jvmtiHeapIterationCallback,
        pub heap_reference_callback: jvmtiHeapReferenceCallback,
        pub primitive_field_callback: jvmtiPrimitiveFieldCallback,
        pub array_primitive_value_callback: jvmtiArrayPrimitiveValueCallback,
        pub string_primitive_value_callback: jvmtiStringPrimitiveValueCallback,
        pub reserved5: jvmtiReservedCallback,
        pub reserved6: jvmtiReservedCallback,
        pub reserved7: jvmtiReservedCallback,
        pub reserved8: jvmtiReservedCallback,
        pub reserved9: jvmtiReservedCallback,
        pub reserved10: jvmtiReservedCallback,
        pub reserved11: jvmtiReservedCallback,
        pub reserved12: jvmtiReservedCallback,
        pub reserved13: jvmtiReservedCallback,
        pub reserved14: jvmtiReservedCallback,
        pub reserved15: jvmtiReservedCallback,
    }
    impl ::std::clone::Clone for Struct__jvmtiHeapCallbacks {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiHeapCallbacks {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiClassDefinition {
        pub klass: jclass,
        pub class_byte_count: jint,
        pub class_bytes: *const ::libc::c_uchar,
    }
    impl ::std::clone::Clone for Struct__jvmtiClassDefinition {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiClassDefinition {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiMonitorUsage {
        pub owner: jthread,
        pub entry_count: jint,
        pub waiter_count: jint,
        pub waiters: *mut jthread,
        pub notify_waiter_count: jint,
        pub notify_waiters: *mut jthread,
    }
    impl ::std::clone::Clone for Struct__jvmtiMonitorUsage {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiMonitorUsage {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiLineNumberEntry {
        pub start_location: jlocation,
        pub line_number: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiLineNumberEntry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiLineNumberEntry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiLocalVariableEntry {
        pub start_location: jlocation,
        pub length: jint,
        pub name: *mut ::libc::c_char,
        pub signature: *mut ::libc::c_char,
        pub generic_signature: *mut ::libc::c_char,
        pub slot: jint,
    }
    impl ::std::clone::Clone for Struct__jvmtiLocalVariableEntry {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiLocalVariableEntry {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiParamInfo {
        pub name: *mut ::libc::c_char,
        pub kind: jvmtiParamKind,
        pub base_type: jvmtiParamTypes,
        pub null_ok: jboolean,
    }
    impl ::std::clone::Clone for Struct__jvmtiParamInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiParamInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiExtensionFunctionInfo {
        pub func: jvmtiExtensionFunction,
        pub id: *mut ::libc::c_char,
        pub short_description: *mut ::libc::c_char,
        pub param_count: jint,
        pub params: *mut jvmtiParamInfo,
        pub error_count: jint,
        pub errors: *mut jvmtiError,
    }
    impl ::std::clone::Clone for Struct__jvmtiExtensionFunctionInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiExtensionFunctionInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiExtensionEventInfo {
        pub extension_event_index: jint,
        pub id: *mut ::libc::c_char,
        pub short_description: *mut ::libc::c_char,
        pub param_count: jint,
        pub params: *mut jvmtiParamInfo,
    }
    impl ::std::clone::Clone for Struct__jvmtiExtensionEventInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiExtensionEventInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiTimerInfo {
        pub max_value: jlong,
        pub may_skip_forward: jboolean,
        pub may_skip_backward: jboolean,
        pub kind: jvmtiTimerKind,
        pub reserved1: jlong,
        pub reserved2: jlong,
    }
    impl ::std::clone::Clone for Struct__jvmtiTimerInfo {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiTimerInfo {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct__jvmtiAddrLocationMap {
        pub start_address: *const ::libc::c_void,
        pub location: jlocation,
    }
    impl ::std::clone::Clone for Struct__jvmtiAddrLocationMap {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiAddrLocationMap {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed29 {
        pub _bindgen_bitfield_1_: ::libc::c_uint,
        pub _bindgen_bitfield_2_: ::libc::c_uint,
        pub _bindgen_bitfield_3_: ::libc::c_uint,
        pub _bindgen_bitfield_4_: ::libc::c_uint,
    }
    impl ::std::clone::Clone for Struct_Unnamed29 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed29 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    pub type jvmtiCapabilities = Struct_Unnamed29;
    pub type jvmtiEventReserved = ::std::option::Option<extern "C" fn() -> ()>;
    pub type jvmtiEventBreakpoint =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation) -> ()>;
    pub type jvmtiEventClassFileLoadHook =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   class_being_redefined: jclass,
                                                   loader: jobject,
                                                   name: *const ::libc::c_char,
                                                   protection_domain: jobject,
                                                   class_data_len: jint,
                                                   class_data:
                                                       *const ::libc::c_uchar,
                                                   new_class_data_len: *mut jint,
                                                   new_class_data:
                                                       *mut *mut ::libc::c_uchar)
                                  -> ()>;
    pub type jvmtiEventClassLoad =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread, klass: jclass)
                                  -> ()>;
    pub type jvmtiEventClassPrepare =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread, klass: jclass)
                                  -> ()>;
    pub type jvmtiEventCompiledMethodLoad =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   method: jmethodID,
                                                   code_size: jint,
                                                   code_addr:
                                                       *const ::libc::c_void,
                                                   map_length: jint,
                                                   map:
                                                       *const jvmtiAddrLocationMap,
                                                   compile_info:
                                                       *const ::libc::c_void)
                                  -> ()>;
    pub type jvmtiEventCompiledMethodUnload =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   method: jmethodID,
                                                   code_addr:
                                                       *const ::libc::c_void)
                                  -> ()>;
    pub type jvmtiEventDataDumpRequest =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)
                                  -> ()>;
    pub type jvmtiEventDynamicCodeGenerated =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   name: *const ::libc::c_char,
                                                   address: *const ::libc::c_void,
                                                   length: jint) -> ()>;
    pub type jvmtiEventException =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   exception: jobject,
                                                   catch_method: jmethodID,
                                                   catch_location: jlocation)
                                  -> ()>;
    pub type jvmtiEventExceptionCatch =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   exception: jobject) -> ()>;
    pub type jvmtiEventFieldAccess =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   field_klass: jclass,
                                                   object: jobject,
                                                   field: jfieldID) -> ()>;
    pub type jvmtiEventFieldModification =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation,
                                                   field_klass: jclass,
                                                   object: jobject,
                                                   field: jfieldID,
                                                   signature_type: ::libc::c_char,
                                                   new_value: jvalue) -> ()>;
    pub type jvmtiEventFramePop =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   was_popped_by_exception:
                                                       jboolean) -> ()>;
    pub type jvmtiEventGarbageCollectionFinish =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)
                                  -> ()>;
    pub type jvmtiEventGarbageCollectionStart =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)
                                  -> ()>;
    pub type jvmtiEventMethodEntry =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID) -> ()>;
    pub type jvmtiEventMethodExit =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   was_popped_by_exception:
                                                       jboolean,
                                                   return_value: jvalue) -> ()>;
    pub type jvmtiEventMonitorContendedEnter =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject) -> ()>;
    pub type jvmtiEventMonitorContendedEntered =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject) -> ()>;
    pub type jvmtiEventMonitorWait =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject,
                                                   timeout: jlong) -> ()>;
    pub type jvmtiEventMonitorWaited =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject,
                                                   timed_out: jboolean) -> ()>;
    pub type jvmtiEventNativeMethodBind =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   address: *mut ::libc::c_void,
                                                   new_address_ptr:
                                                       *mut *mut ::libc::c_void)
                                  -> ()>;
    pub type jvmtiEventObjectFree =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   tag: jlong) -> ()>;
    pub type jvmtiEventResourceExhausted =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   flags: jint,
                                                   reserved:
                                                       *const ::libc::c_void,
                                                   description:
                                                       *const ::libc::c_char)
                                  -> ()>;
    pub type jvmtiEventSingleStep =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   method: jmethodID,
                                                   location: jlocation) -> ()>;
    pub type jvmtiEventThreadEnd =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread) -> ()>;
    pub type jvmtiEventThreadStart =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread) -> ()>;
    pub type jvmtiEventVMDeath =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv) -> ()>;
    pub type jvmtiEventVMInit =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread) -> ()>;
    pub type jvmtiEventVMObjectAlloc =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv,
                                                   thread: jthread,
                                                   object: jobject,
                                                   object_klass: jclass,
                                                   size: jlong) -> ()>;
    pub type jvmtiEventVMStart =
        ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv,
                                                   jni_env: *mut JNIEnv) -> ()>;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_Unnamed30 {
        pub VMInit: jvmtiEventVMInit,
        pub VMDeath: jvmtiEventVMDeath,
        pub ThreadStart: jvmtiEventThreadStart,
        pub ThreadEnd: jvmtiEventThreadEnd,
        pub ClassFileLoadHook: jvmtiEventClassFileLoadHook,
        pub ClassLoad: jvmtiEventClassLoad,
        pub ClassPrepare: jvmtiEventClassPrepare,
        pub VMStart: jvmtiEventVMStart,
        pub Exception: jvmtiEventException,
        pub ExceptionCatch: jvmtiEventExceptionCatch,
        pub SingleStep: jvmtiEventSingleStep,
        pub FramePop: jvmtiEventFramePop,
        pub Breakpoint: jvmtiEventBreakpoint,
        pub FieldAccess: jvmtiEventFieldAccess,
        pub FieldModification: jvmtiEventFieldModification,
        pub MethodEntry: jvmtiEventMethodEntry,
        pub MethodExit: jvmtiEventMethodExit,
        pub NativeMethodBind: jvmtiEventNativeMethodBind,
        pub CompiledMethodLoad: jvmtiEventCompiledMethodLoad,
        pub CompiledMethodUnload: jvmtiEventCompiledMethodUnload,
        pub DynamicCodeGenerated: jvmtiEventDynamicCodeGenerated,
        pub DataDumpRequest: jvmtiEventDataDumpRequest,
        pub reserved72: jvmtiEventReserved,
        pub MonitorWait: jvmtiEventMonitorWait,
        pub MonitorWaited: jvmtiEventMonitorWaited,
        pub MonitorContendedEnter: jvmtiEventMonitorContendedEnter,
        pub MonitorContendedEntered: jvmtiEventMonitorContendedEntered,
        pub reserved77: jvmtiEventReserved,
        pub reserved78: jvmtiEventReserved,
        pub reserved79: jvmtiEventReserved,
        pub ResourceExhausted: jvmtiEventResourceExhausted,
        pub GarbageCollectionStart: jvmtiEventGarbageCollectionStart,
        pub GarbageCollectionFinish: jvmtiEventGarbageCollectionFinish,
        pub ObjectFree: jvmtiEventObjectFree,
        pub VMObjectAlloc: jvmtiEventVMObjectAlloc,
    }
    impl ::std::clone::Clone for Struct_Unnamed30 {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_Unnamed30 {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }

    pub type jvmtiEventCallbacks = Struct_Unnamed30;
    #[repr(C)]
    #[derive(Copy)]
    pub struct Struct_jvmtiInterface_1_ {
        pub reserved1: *mut ::libc::c_void,
        pub SetEventNotificationMode: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut jvmtiEnv,
                                                                                 mode:
                                                                                     jvmtiEventMode,
                                                                                 event_type:
                                                                                     jvmtiEvent,
                                                                                 event_thread:
                                                                                     jthread, ...)
                                                                -> jvmtiError>,
        pub reserved3: *mut ::libc::c_void,
        pub GetAllThreads: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      threads_count_ptr:
                                                                          *mut jint,
                                                                      threads_ptr:
                                                                          *mut *mut jthread)
                                                     -> jvmtiError>,
        pub SuspendThread: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      thread:
                                                                          jthread)
                                                     -> jvmtiError>,
        pub ResumeThread: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     thread:
                                                                         jthread)
                                                    -> jvmtiError>,
        pub StopThread: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut jvmtiEnv,
                                                                   thread:
                                                                       jthread,
                                                                   exception:
                                                                       jobject)
                                                  -> jvmtiError>,
        pub InterruptThread: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        thread:
                                                                            jthread)
                                                       -> jvmtiError>,
        pub GetThreadInfo: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      thread:
                                                                          jthread,
                                                                      info_ptr:
                                                                          *mut jvmtiThreadInfo)
                                                     -> jvmtiError>,
        pub GetOwnedMonitorInfo: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut jvmtiEnv,
                                                                            thread:
                                                                                jthread,
                                                                            owned_monitor_count_ptr:
                                                                                *mut jint,
                                                                            owned_monitors_ptr:
                                                                                *mut *mut jobject)
                                                           -> jvmtiError>,
        pub GetCurrentContendedMonitor: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut jvmtiEnv,
                                                                                   thread:
                                                                                       jthread,
                                                                                   monitor_ptr:
                                                                                       *mut jobject)
                                                                  -> jvmtiError>,
        pub RunAgentThread: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       thread:
                                                                           jthread,
                                                                       _proc:
                                                                           jvmtiStartFunction,
                                                                       arg:
                                                                           *const ::libc::c_void,
                                                                       priority:
                                                                           jint)
                                                      -> jvmtiError>,
        pub GetTopThreadGroups: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           group_count_ptr:
                                                                               *mut jint,
                                                                           groups_ptr:
                                                                               *mut *mut jthreadGroup)
                                                          -> jvmtiError>,
        pub GetThreadGroupInfo: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           group:
                                                                               jthreadGroup,
                                                                           info_ptr:
                                                                               *mut jvmtiThreadGroupInfo)
                                                          -> jvmtiError>,
        pub GetThreadGroupChildren: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv,
                                                                               group:
                                                                                   jthreadGroup,
                                                                               thread_count_ptr:
                                                                                   *mut jint,
                                                                               threads_ptr:
                                                                                   *mut *mut jthread,
                                                                               group_count_ptr:
                                                                                   *mut jint,
                                                                               groups_ptr:
                                                                                   *mut *mut jthreadGroup)
                                                              -> jvmtiError>,
        pub GetFrameCount: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      thread:
                                                                          jthread,
                                                                      count_ptr:
                                                                          *mut jint)
                                                     -> jvmtiError>,
        pub GetThreadState: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       thread:
                                                                           jthread,
                                                                       thread_state_ptr:
                                                                           *mut jint)
                                                      -> jvmtiError>,
        pub GetCurrentThread: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         thread_ptr:
                                                                             *mut jthread)
                                                        -> jvmtiError>,
        pub GetFrameLocation: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         thread:
                                                                             jthread,
                                                                         depth:
                                                                             jint,
                                                                         method_ptr:
                                                                             *mut jmethodID,
                                                                         location_ptr:
                                                                             *mut jlocation)
                                                        -> jvmtiError>,
        pub NotifyFramePop: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       thread:
                                                                           jthread,
                                                                       depth:
                                                                           jint)
                                                      -> jvmtiError>,
        pub GetLocalObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       thread:
                                                                           jthread,
                                                                       depth:
                                                                           jint,
                                                                       slot: jint,
                                                                       value_ptr:
                                                                           *mut jobject)
                                                      -> jvmtiError>,
        pub GetLocalInt: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut jvmtiEnv,
                                                                    thread:
                                                                        jthread,
                                                                    depth: jint,
                                                                    slot: jint,
                                                                    value_ptr:
                                                                        *mut jint)
                                                   -> jvmtiError>,
        pub GetLocalLong: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     thread:
                                                                         jthread,
                                                                     depth: jint,
                                                                     slot: jint,
                                                                     value_ptr:
                                                                         *mut jlong)
                                                    -> jvmtiError>,
        pub GetLocalFloat: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      thread:
                                                                          jthread,
                                                                      depth: jint,
                                                                      slot: jint,
                                                                      value_ptr:
                                                                          *mut jfloat)
                                                     -> jvmtiError>,
        pub GetLocalDouble: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       thread:
                                                                           jthread,
                                                                       depth:
                                                                           jint,
                                                                       slot: jint,
                                                                       value_ptr:
                                                                           *mut jdouble)
                                                      -> jvmtiError>,
        pub SetLocalObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       thread:
                                                                           jthread,
                                                                       depth:
                                                                           jint,
                                                                       slot: jint,
                                                                       value:
                                                                           jobject)
                                                      -> jvmtiError>,
        pub SetLocalInt: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut jvmtiEnv,
                                                                    thread:
                                                                        jthread,
                                                                    depth: jint,
                                                                    slot: jint,
                                                                    value: jint)
                                                   -> jvmtiError>,
        pub SetLocalLong: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     thread:
                                                                         jthread,
                                                                     depth: jint,
                                                                     slot: jint,
                                                                     value: jlong)
                                                    -> jvmtiError>,
        pub SetLocalFloat: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      thread:
                                                                          jthread,
                                                                      depth: jint,
                                                                      slot: jint,
                                                                      value:
                                                                          jfloat)
                                                     -> jvmtiError>,
        pub SetLocalDouble: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       thread:
                                                                           jthread,
                                                                       depth:
                                                                           jint,
                                                                       slot: jint,
                                                                       value:
                                                                           jdouble)
                                                      -> jvmtiError>,
        pub CreateRawMonitor: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         name:
                                                                             *const ::libc::c_char,
                                                                         monitor_ptr:
                                                                             *mut jrawMonitorID)
                                                        -> jvmtiError>,
        pub DestroyRawMonitor: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          monitor:
                                                                              jrawMonitorID)
                                                         -> jvmtiError>,
        pub RawMonitorEnter: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        monitor:
                                                                            jrawMonitorID)
                                                       -> jvmtiError>,
        pub RawMonitorExit: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       monitor:
                                                                           jrawMonitorID)
                                                      -> jvmtiError>,
        pub RawMonitorWait: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       monitor:
                                                                           jrawMonitorID,
                                                                       millis:
                                                                           jlong)
                                                      -> jvmtiError>,
        pub RawMonitorNotify: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         monitor:
                                                                             jrawMonitorID)
                                                        -> jvmtiError>,
        pub RawMonitorNotifyAll: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut jvmtiEnv,
                                                                            monitor:
                                                                                jrawMonitorID)
                                                           -> jvmtiError>,
        pub SetBreakpoint: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      method:
                                                                          jmethodID,
                                                                      location:
                                                                          jlocation)
                                                     -> jvmtiError>,
        pub ClearBreakpoint: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        method:
                                                                            jmethodID,
                                                                        location:
                                                                            jlocation)
                                                       -> jvmtiError>,
        pub reserved40: *mut ::libc::c_void,
        pub SetFieldAccessWatch: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut jvmtiEnv,
                                                                            klass:
                                                                                jclass,
                                                                            field:
                                                                                jfieldID)
                                                           -> jvmtiError>,
        pub ClearFieldAccessWatch: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              klass:
                                                                                  jclass,
                                                                              field:
                                                                                  jfieldID)
                                                             -> jvmtiError>,
        pub SetFieldModificationWatch: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut jvmtiEnv,
                                                                                  klass:
                                                                                      jclass,
                                                                                  field:
                                                                                      jfieldID)
                                                                 -> jvmtiError>,
        pub ClearFieldModificationWatch: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut jvmtiEnv,
                                                                                    klass:
                                                                                        jclass,
                                                                                    field:
                                                                                        jfieldID)
                                                                   -> jvmtiError>,
        pub IsModifiableClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          klass:
                                                                              jclass,
                                                                          is_modifiable_class_ptr:
                                                                              *mut jboolean)
                                                         -> jvmtiError>,
        pub Allocate: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut jvmtiEnv,
                                                                 size: jlong,
                                                                 mem_ptr:
                                                                     *mut *mut ::libc::c_uchar)
                                                -> jvmtiError>,
        pub Deallocate: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut jvmtiEnv,
                                                                   mem:
                                                                       *mut ::libc::c_uchar)
                                                  -> jvmtiError>,
        pub GetClassSignature: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          klass:
                                                                              jclass,
                                                                          signature_ptr:
                                                                              *mut *mut ::libc::c_char,
                                                                          generic_ptr:
                                                                              *mut *mut ::libc::c_char)
                                                         -> jvmtiError>,
        pub GetClassStatus: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       klass:
                                                                           jclass,
                                                                       status_ptr:
                                                                           *mut jint)
                                                      -> jvmtiError>,
        pub GetSourceFileName: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          klass:
                                                                              jclass,
                                                                          source_name_ptr:
                                                                              *mut *mut ::libc::c_char)
                                                         -> jvmtiError>,
        pub GetClassModifiers: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          klass:
                                                                              jclass,
                                                                          modifiers_ptr:
                                                                              *mut jint)
                                                         -> jvmtiError>,
        pub GetClassMethods: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        klass:
                                                                            jclass,
                                                                        method_count_ptr:
                                                                            *mut jint,
                                                                        methods_ptr:
                                                                            *mut *mut jmethodID)
                                                       -> jvmtiError>,
        pub GetClassFields: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       klass:
                                                                           jclass,
                                                                       field_count_ptr:
                                                                           *mut jint,
                                                                       fields_ptr:
                                                                           *mut *mut jfieldID)
                                                      -> jvmtiError>,
        pub GetImplementedInterfaces: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut jvmtiEnv,
                                                                                 klass:
                                                                                     jclass,
                                                                                 interface_count_ptr:
                                                                                     *mut jint,
                                                                                 interfaces_ptr:
                                                                                     *mut *mut jclass)
                                                                -> jvmtiError>,
        pub IsInterface: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut jvmtiEnv,
                                                                    klass: jclass,
                                                                    is_interface_ptr:
                                                                        *mut jboolean)
                                                   -> jvmtiError>,
        pub IsArrayClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     klass:
                                                                         jclass,
                                                                     is_array_class_ptr:
                                                                         *mut jboolean)
                                                    -> jvmtiError>,
        pub GetClassLoader: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       klass:
                                                                           jclass,
                                                                       classloader_ptr:
                                                                           *mut jobject)
                                                      -> jvmtiError>,
        pub GetObjectHashCode: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          object:
                                                                              jobject,
                                                                          hash_code_ptr:
                                                                              *mut jint)
                                                         -> jvmtiError>,
        pub GetObjectMonitorUsage: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              object:
                                                                                  jobject,
                                                                              info_ptr:
                                                                                  *mut jvmtiMonitorUsage)
                                                             -> jvmtiError>,
        pub GetFieldName: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     klass:
                                                                         jclass,
                                                                     field:
                                                                         jfieldID,
                                                                     name_ptr:
                                                                         *mut *mut ::libc::c_char,
                                                                     signature_ptr:
                                                                         *mut *mut ::libc::c_char,
                                                                     generic_ptr:
                                                                         *mut *mut ::libc::c_char)
                                                    -> jvmtiError>,
        pub GetFieldDeclaringClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv,
                                                                               klass:
                                                                                   jclass,
                                                                               field:
                                                                                   jfieldID,
                                                                               declaring_class_ptr:
                                                                                   *mut jclass)
                                                              -> jvmtiError>,
        pub GetFieldModifiers: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          klass:
                                                                              jclass,
                                                                          field:
                                                                              jfieldID,
                                                                          modifiers_ptr:
                                                                              *mut jint)
                                                         -> jvmtiError>,
        pub IsFieldSynthetic: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         klass:
                                                                             jclass,
                                                                         field:
                                                                             jfieldID,
                                                                         is_synthetic_ptr:
                                                                             *mut jboolean)
                                                        -> jvmtiError>,
        pub GetMethodName: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      method:
                                                                          jmethodID,
                                                                      name_ptr:
                                                                          *mut *mut ::libc::c_char,
                                                                      signature_ptr:
                                                                          *mut *mut ::libc::c_char,
                                                                      generic_ptr:
                                                                          *mut *mut ::libc::c_char)
                                                     -> jvmtiError>,
        pub GetMethodDeclaringClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut jvmtiEnv,
                                                                                method:
                                                                                    jmethodID,
                                                                                declaring_class_ptr:
                                                                                    *mut jclass)
                                                               -> jvmtiError>,
        pub GetMethodModifiers: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           method:
                                                                               jmethodID,
                                                                           modifiers_ptr:
                                                                               *mut jint)
                                                          -> jvmtiError>,
        pub reserved67: *mut ::libc::c_void,
        pub GetMaxLocals: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     method:
                                                                         jmethodID,
                                                                     max_ptr:
                                                                         *mut jint)
                                                    -> jvmtiError>,
        pub GetArgumentsSize: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         method:
                                                                             jmethodID,
                                                                         size_ptr:
                                                                             *mut jint)
                                                        -> jvmtiError>,
        pub GetLineNumberTable: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           method:
                                                                               jmethodID,
                                                                           entry_count_ptr:
                                                                               *mut jint,
                                                                           table_ptr:
                                                                               *mut *mut jvmtiLineNumberEntry)
                                                          -> jvmtiError>,
        pub GetMethodLocation: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          method:
                                                                              jmethodID,
                                                                          start_location_ptr:
                                                                              *mut jlocation,
                                                                          end_location_ptr:
                                                                              *mut jlocation)
                                                         -> jvmtiError>,
        pub GetLocalVariableTable: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              method:
                                                                                  jmethodID,
                                                                              entry_count_ptr:
                                                                                  *mut jint,
                                                                              table_ptr:
                                                                                  *mut *mut jvmtiLocalVariableEntry)
                                                             -> jvmtiError>,
        pub SetNativeMethodPrefix: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              prefix:
                                                                                  *const ::libc::c_char)
                                                             -> jvmtiError>,
        pub SetNativeMethodPrefixes: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut jvmtiEnv,
                                                                                prefix_count:
                                                                                    jint,
                                                                                prefixes:
                                                                                    *mut *mut ::libc::c_char)
                                                               -> jvmtiError>,
        pub GetBytecodes: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     method:
                                                                         jmethodID,
                                                                     bytecode_count_ptr:
                                                                         *mut jint,
                                                                     bytecodes_ptr:
                                                                         *mut *mut ::libc::c_uchar)
                                                    -> jvmtiError>,
        pub IsMethodNative: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       method:
                                                                           jmethodID,
                                                                       is_native_ptr:
                                                                           *mut jboolean)
                                                      -> jvmtiError>,
        pub IsMethodSynthetic: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          method:
                                                                              jmethodID,
                                                                          is_synthetic_ptr:
                                                                              *mut jboolean)
                                                         -> jvmtiError>,
        pub GetLoadedClasses: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         class_count_ptr:
                                                                             *mut jint,
                                                                         classes_ptr:
                                                                             *mut *mut jclass)
                                                        -> jvmtiError>,
        pub GetClassLoaderClasses: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              initiating_loader:
                                                                                  jobject,
                                                                              class_count_ptr:
                                                                                  *mut jint,
                                                                              classes_ptr:
                                                                                  *mut *mut jclass)
                                                             -> jvmtiError>,
        pub PopFrame: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut jvmtiEnv,
                                                                 thread: jthread)
                                                -> jvmtiError>,
        pub ForceEarlyReturnObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv,
                                                                               thread:
                                                                                   jthread,
                                                                               value:
                                                                                   jobject)
                                                              -> jvmtiError>,
        pub ForceEarlyReturnInt: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut jvmtiEnv,
                                                                            thread:
                                                                                jthread,
                                                                            value:
                                                                                jint)
                                                           -> jvmtiError>,
        pub ForceEarlyReturnLong: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut jvmtiEnv,
                                                                             thread:
                                                                                 jthread,
                                                                             value:
                                                                                 jlong)
                                                            -> jvmtiError>,
        pub ForceEarlyReturnFloat: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              thread:
                                                                                  jthread,
                                                                              value:
                                                                                  jfloat)
                                                             -> jvmtiError>,
        pub ForceEarlyReturnDouble: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv,
                                                                               thread:
                                                                                   jthread,
                                                                               value:
                                                                                   jdouble)
                                                              -> jvmtiError>,
        pub ForceEarlyReturnVoid: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut jvmtiEnv,
                                                                             thread:
                                                                                 jthread)
                                                            -> jvmtiError>,
        pub RedefineClasses: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        class_count:
                                                                            jint,
                                                                        class_definitions:
                                                                            *const jvmtiClassDefinition)
                                                       -> jvmtiError>,
        pub GetVersionNumber: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         version_ptr:
                                                                             *mut jint)
                                                        -> jvmtiError>,
        pub GetCapabilities: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        capabilities_ptr:
                                                                            *mut jvmtiCapabilities)
                                                       -> jvmtiError>,
        pub GetSourceDebugExtension: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut jvmtiEnv,
                                                                                klass:
                                                                                    jclass,
                                                                                source_debug_extension_ptr:
                                                                                    *mut *mut ::libc::c_char)
                                                               -> jvmtiError>,
        pub IsMethodObsolete: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         method:
                                                                             jmethodID,
                                                                         is_obsolete_ptr:
                                                                             *mut jboolean)
                                                        -> jvmtiError>,
        pub SuspendThreadList: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          request_count:
                                                                              jint,
                                                                          request_list:
                                                                              *const jthread,
                                                                          results:
                                                                              *mut jvmtiError)
                                                         -> jvmtiError>,
        pub ResumeThreadList: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         request_count:
                                                                             jint,
                                                                         request_list:
                                                                             *const jthread,
                                                                         results:
                                                                             *mut jvmtiError)
                                                        -> jvmtiError>,
        pub reserved94: *mut ::libc::c_void,
        pub reserved95: *mut ::libc::c_void,
        pub reserved96: *mut ::libc::c_void,
        pub reserved97: *mut ::libc::c_void,
        pub reserved98: *mut ::libc::c_void,
        pub reserved99: *mut ::libc::c_void,
        pub GetAllStackTraces: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          max_frame_count:
                                                                              jint,
                                                                          stack_info_ptr:
                                                                              *mut *mut jvmtiStackInfo,
                                                                          thread_count_ptr:
                                                                              *mut jint)
                                                         -> jvmtiError>,
        pub GetThreadListStackTraces: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut jvmtiEnv,
                                                                                 thread_count:
                                                                                     jint,
                                                                                 thread_list:
                                                                                     *const jthread,
                                                                                 max_frame_count:
                                                                                     jint,
                                                                                 stack_info_ptr:
                                                                                     *mut *mut jvmtiStackInfo)
                                                                -> jvmtiError>,
        pub GetThreadLocalStorage: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              thread:
                                                                                  jthread,
                                                                              data_ptr:
                                                                                  *mut *mut ::libc::c_void)
                                                             -> jvmtiError>,
        pub SetThreadLocalStorage: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              thread:
                                                                                  jthread,
                                                                              data:
                                                                                  *const ::libc::c_void)
                                                             -> jvmtiError>,
        pub GetStackTrace: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      thread:
                                                                          jthread,
                                                                      start_depth:
                                                                          jint,
                                                                      max_frame_count:
                                                                          jint,
                                                                      frame_buffer:
                                                                          *mut jvmtiFrameInfo,
                                                                      count_ptr:
                                                                          *mut jint)
                                                     -> jvmtiError>,
        pub reserved105: *mut ::libc::c_void,
        pub GetTag: ::std::option::Option<unsafe extern "C" fn(env: *mut jvmtiEnv,
                                                               object: jobject,
                                                               tag_ptr:
                                                                   *mut jlong)
                                              -> jvmtiError>,
        pub SetTag: ::std::option::Option<unsafe extern "C" fn(env: *mut jvmtiEnv,
                                                               object: jobject,
                                                               tag: jlong)
                                              -> jvmtiError>,
        pub ForceGarbageCollection: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv)
                                                              -> jvmtiError>,
        pub IterateOverObjectsReachableFromObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                                  *mut jvmtiEnv,
                                                                                              object:
                                                                                                  jobject,
                                                                                              object_reference_callback:
                                                                                                  jvmtiObjectReferenceCallback,
                                                                                              user_data:
                                                                                                  *const ::libc::c_void)
                                                                             ->
                                                                                 jvmtiError>,
        pub IterateOverReachableObjects: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut jvmtiEnv,
                                                                                    heap_root_callback:
                                                                                        jvmtiHeapRootCallback,
                                                                                    stack_ref_callback:
                                                                                        jvmtiStackReferenceCallback,
                                                                                    object_ref_callback:
                                                                                        jvmtiObjectReferenceCallback,
                                                                                    user_data:
                                                                                        *const ::libc::c_void)
                                                                   -> jvmtiError>,
        pub IterateOverHeap: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        object_filter:
                                                                            jvmtiHeapObjectFilter,
                                                                        heap_object_callback:
                                                                            jvmtiHeapObjectCallback,
                                                                        user_data:
                                                                            *const ::libc::c_void)
                                                       -> jvmtiError>,
        pub IterateOverInstancesOfClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                        *mut jvmtiEnv,
                                                                                    klass:
                                                                                        jclass,
                                                                                    object_filter:
                                                                                        jvmtiHeapObjectFilter,
                                                                                    heap_object_callback:
                                                                                        jvmtiHeapObjectCallback,
                                                                                    user_data:
                                                                                        *const ::libc::c_void)
                                                                   -> jvmtiError>,
        pub reserved113: *mut ::libc::c_void,
        pub GetObjectsWithTags: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           tag_count:
                                                                               jint,
                                                                           tags:
                                                                               *const jlong,
                                                                           count_ptr:
                                                                               *mut jint,
                                                                           object_result_ptr:
                                                                               *mut *mut jobject,
                                                                           tag_result_ptr:
                                                                               *mut *mut jlong)
                                                          -> jvmtiError>,
        pub FollowReferences: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         heap_filter:
                                                                             jint,
                                                                         klass:
                                                                             jclass,
                                                                         initial_object:
                                                                             jobject,
                                                                         callbacks:
                                                                             *const jvmtiHeapCallbacks,
                                                                         user_data:
                                                                             *const ::libc::c_void)
                                                        -> jvmtiError>,
        pub IterateThroughHeap: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           heap_filter:
                                                                               jint,
                                                                           klass:
                                                                               jclass,
                                                                           callbacks:
                                                                               *const jvmtiHeapCallbacks,
                                                                           user_data:
                                                                               *const ::libc::c_void)
                                                          -> jvmtiError>,
        pub reserved117: *mut ::libc::c_void,
        pub reserved118: *mut ::libc::c_void,
        pub reserved119: *mut ::libc::c_void,
        pub SetJNIFunctionTable: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut jvmtiEnv,
                                                                            function_table:
                                                                                *const jniNativeInterface)
                                                           -> jvmtiError>,
        pub GetJNIFunctionTable: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut jvmtiEnv,
                                                                            function_table:
                                                                                *mut *mut jniNativeInterface)
                                                           -> jvmtiError>,
        pub SetEventCallbacks: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          callbacks:
                                                                              *const jvmtiEventCallbacks,
                                                                          size_of_callbacks:
                                                                              jint)
                                                         -> jvmtiError>,
        pub GenerateEvents: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       event_type:
                                                                           jvmtiEvent)
                                                      -> jvmtiError>,
        pub GetExtensionFunctions: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              extension_count_ptr:
                                                                                  *mut jint,
                                                                              extensions:
                                                                                  *mut *mut jvmtiExtensionFunctionInfo)
                                                             -> jvmtiError>,
        pub GetExtensionEvents: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           extension_count_ptr:
                                                                               *mut jint,
                                                                           extensions:
                                                                               *mut *mut jvmtiExtensionEventInfo)
                                                          -> jvmtiError>,
        pub SetExtensionEventCallback: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut jvmtiEnv,
                                                                                  extension_event_index:
                                                                                      jint,
                                                                                  callback:
                                                                                      jvmtiExtensionEvent)
                                                                 -> jvmtiError>,
        pub DisposeEnvironment: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv)
                                                          -> jvmtiError>,
        pub GetErrorName: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     error:
                                                                         jvmtiError,
                                                                     name_ptr:
                                                                         *mut *mut ::libc::c_char)
                                                    -> jvmtiError>,
        pub GetJLocationFormat: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           format_ptr:
                                                                               *mut jvmtiJlocationFormat)
                                                          -> jvmtiError>,
        pub GetSystemProperties: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut jvmtiEnv,
                                                                            count_ptr:
                                                                                *mut jint,
                                                                            property_ptr:
                                                                                *mut *mut *mut ::libc::c_char)
                                                           -> jvmtiError>,
        pub GetSystemProperty: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          property:
                                                                              *const ::libc::c_char,
                                                                          value_ptr:
                                                                              *mut *mut ::libc::c_char)
                                                         -> jvmtiError>,
        pub SetSystemProperty: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut jvmtiEnv,
                                                                          property:
                                                                              *const ::libc::c_char,
                                                                          value:
                                                                              *const ::libc::c_char)
                                                         -> jvmtiError>,
        pub GetPhase: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut jvmtiEnv,
                                                                 phase_ptr:
                                                                     *mut jvmtiPhase)
                                                -> jvmtiError>,
        pub GetCurrentThreadCpuTimerInfo: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                         *mut jvmtiEnv,
                                                                                     info_ptr:
                                                                                         *mut jvmtiTimerInfo)
                                                                    ->
                                                                        jvmtiError>,
        pub GetCurrentThreadCpuTime: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut jvmtiEnv,
                                                                                nanos_ptr:
                                                                                    *mut jlong)
                                                               -> jvmtiError>,
        pub GetThreadCpuTimerInfo: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut jvmtiEnv,
                                                                              info_ptr:
                                                                                  *mut jvmtiTimerInfo)
                                                             -> jvmtiError>,
        pub GetThreadCpuTime: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         thread:
                                                                             jthread,
                                                                         nanos_ptr:
                                                                             *mut jlong)
                                                        -> jvmtiError>,
        pub GetTimerInfo: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut jvmtiEnv,
                                                                     info_ptr:
                                                                         *mut jvmtiTimerInfo)
                                                    -> jvmtiError>,
        pub GetTime: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut jvmtiEnv,
                                                                nanos_ptr:
                                                                    *mut jlong)
                                               -> jvmtiError>,
        pub GetPotentialCapabilities: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut jvmtiEnv,
                                                                                 capabilities_ptr:
                                                                                     *mut jvmtiCapabilities)
                                                                -> jvmtiError>,
        pub reserved141: *mut ::libc::c_void,
        pub AddCapabilities: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        capabilities_ptr:
                                                                            *const jvmtiCapabilities)
                                                       -> jvmtiError>,
        pub RelinquishCapabilities: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv,
                                                                               capabilities_ptr:
                                                                                   *const jvmtiCapabilities)
                                                              -> jvmtiError>,
        pub GetAvailableProcessors: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv,
                                                                               processor_count_ptr:
                                                                                   *mut jint)
                                                              -> jvmtiError>,
        pub GetClassVersionNumbers: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut jvmtiEnv,
                                                                               klass:
                                                                                   jclass,
                                                                               minor_version_ptr:
                                                                                   *mut jint,
                                                                               major_version_ptr:
                                                                                   *mut jint)
                                                              -> jvmtiError>,
        pub GetConstantPool: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut jvmtiEnv,
                                                                        klass:
                                                                            jclass,
                                                                        constant_pool_count_ptr:
                                                                            *mut jint,
                                                                        constant_pool_byte_count_ptr:
                                                                            *mut jint,
                                                                        constant_pool_bytes_ptr:
                                                                            *mut *mut ::libc::c_uchar)
                                                       -> jvmtiError>,
        pub GetEnvironmentLocalStorage: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut jvmtiEnv,
                                                                                   data_ptr:
                                                                                       *mut *mut ::libc::c_void)
                                                                  -> jvmtiError>,
        pub SetEnvironmentLocalStorage: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                       *mut jvmtiEnv,
                                                                                   data:
                                                                                       *const ::libc::c_void)
                                                                  -> jvmtiError>,
        pub AddToBootstrapClassLoaderSearch: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                            *mut jvmtiEnv,
                                                                                        segment:
                                                                                            *const ::libc::c_char)
                                                                       ->
                                                                           jvmtiError>,
        pub SetVerboseFlag: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut jvmtiEnv,
                                                                       flag:
                                                                           jvmtiVerboseFlag,
                                                                       value:
                                                                           jboolean)
                                                      -> jvmtiError>,
        pub AddToSystemClassLoaderSearch: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                         *mut jvmtiEnv,
                                                                                     segment:
                                                                                         *const ::libc::c_char)
                                                                    ->
                                                                        jvmtiError>,
        pub RetransformClasses: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut jvmtiEnv,
                                                                           class_count:
                                                                               jint,
                                                                           classes:
                                                                               *const jclass)
                                                          -> jvmtiError>,
        pub GetOwnedMonitorStackDepthInfo: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                          *mut jvmtiEnv,
                                                                                      thread:
                                                                                          jthread,
                                                                                      monitor_info_count_ptr:
                                                                                          *mut jint,
                                                                                      monitor_info_ptr:
                                                                                          *mut *mut jvmtiMonitorStackDepthInfo)
                                                                     ->
                                                                         jvmtiError>,
        pub GetObjectSize: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut jvmtiEnv,
                                                                      object:
                                                                          jobject,
                                                                      size_ptr:
                                                                          *mut jlong)
                                                     -> jvmtiError>,
        pub GetLocalInstance: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut jvmtiEnv,
                                                                         thread:
                                                                             jthread,
                                                                         depth:
                                                                             jint,
                                                                         value_ptr:
                                                                             *mut jobject)
                                                        -> jvmtiError>,
    }
    impl ::std::clone::Clone for Struct_jvmtiInterface_1_ {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct_jvmtiInterface_1_ {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }

    #[allow(non_camel_case_types)]
    pub type jvmtiInterface_1 = Struct_jvmtiInterface_1_;

    #[repr(C)]
    #[derive(Copy)]
    #[allow(bad_style)]
    pub struct Struct__jvmtiEnv {
        pub functions: *const Struct_jvmtiInterface_1_,
    }
    impl ::std::clone::Clone for Struct__jvmtiEnv {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct__jvmtiEnv {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }

    #[allow(bad_style)]
    pub type __builtin_va_list = [__va_list_tag; 1usize];

    #[allow(bad_style)]
    pub type __va_list_tag = Struct___va_list_tag;

    #[repr(C)]
    #[derive(Copy)]
    #[allow(bad_style)]
    pub struct Struct___va_list_tag {
        pub gp_offset: ::libc::c_uint,
        pub fp_offset: ::libc::c_uint,
        pub overflow_arg_area: *mut ::libc::c_void,
        pub reg_save_area: *mut ::libc::c_void,
    }
    impl ::std::clone::Clone for Struct___va_list_tag {
        fn clone(&self) -> Self { *self }
    }
    impl ::std::default::Default for Struct___va_list_tag {
        fn default() -> Self { unsafe { ::std::mem::zeroed() } }
    }
    extern "C" {
        pub static mut __stdinp: *mut FILE;
        pub static mut __stdoutp: *mut FILE;
        pub static mut __stderrp: *mut FILE;
        pub static sys_nerr: ::libc::c_int;
        pub static mut sys_errlist: *const *const ::libc::c_char;
    }
    #[allow(non_snake_case)]
    extern "C" {
        /*
        pub fn renameat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                        arg3: ::libc::c_int, arg4: *const ::libc::c_char)
         -> ::libc::c_int;
        pub fn clearerr(arg1: *mut FILE) -> ();
        pub fn fclose(arg1: *mut FILE) -> ::libc::c_int;
        pub fn feof(arg1: *mut FILE) -> ::libc::c_int;
        pub fn ferror(arg1: *mut FILE) -> ::libc::c_int;
        pub fn fflush(arg1: *mut FILE) -> ::libc::c_int;
        pub fn fgetc(arg1: *mut FILE) -> ::libc::c_int;
        pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::libc::c_int;
        pub fn fgets(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                     arg3: *mut FILE) -> *mut ::libc::c_char;
        pub fn fopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
         -> *mut FILE;
        pub fn fprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
         -> ::libc::c_int;
        pub fn fputc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
        pub fn fputs(arg1: *const ::libc::c_char, arg2: *mut FILE)
         -> ::libc::c_int;
        pub fn fread(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                     arg4: *mut FILE) -> size_t;
        pub fn freopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                       arg3: *mut FILE) -> *mut FILE;
        pub fn fscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
         -> ::libc::c_int;
        pub fn fseek(arg1: *mut FILE, arg2: ::libc::c_long, arg3: ::libc::c_int)
         -> ::libc::c_int;
        pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::libc::c_int;
        pub fn ftell(arg1: *mut FILE) -> ::libc::c_long;
        pub fn fwrite(arg1: *const ::libc::c_void, arg2: size_t, arg3: size_t,
                      arg4: *mut FILE) -> size_t;
        pub fn getc(arg1: *mut FILE) -> ::libc::c_int;
        pub fn getchar() -> ::libc::c_int;
        pub fn gets(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
        pub fn perror(arg1: *const ::libc::c_char) -> ();
        pub fn printf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
        pub fn putc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
        pub fn putchar(arg1: ::libc::c_int) -> ::libc::c_int;
        pub fn puts(arg1: *const ::libc::c_char) -> ::libc::c_int;
        pub fn remove(arg1: *const ::libc::c_char) -> ::libc::c_int;
        pub fn rename(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
         -> ::libc::c_int;
        pub fn rewind(arg1: *mut FILE) -> ();
        pub fn scanf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
        pub fn setbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char) -> ();
        pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                       arg3: ::libc::c_int, arg4: size_t) -> ::libc::c_int;
        pub fn sprintf(arg1: *mut ::libc::c_char,
                       arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
        pub fn sscanf(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
        pub fn tmpfile() -> *mut FILE;
        pub fn tmpnam(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
        pub fn ungetc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
        pub fn vfprintf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                        arg3: va_list) -> ::libc::c_int;
        pub fn vprintf(arg1: *const ::libc::c_char, arg2: va_list)
         -> ::libc::c_int;
        pub fn vsprintf(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                        arg3: va_list) -> ::libc::c_int;
        pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
        pub fn fdopen(arg1: ::libc::c_int, arg2: *const ::libc::c_char)
         -> *mut FILE;
        pub fn fileno(arg1: *mut FILE) -> ::libc::c_int;
        pub fn pclose(arg1: *mut FILE) -> ::libc::c_int;
        pub fn popen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
         -> *mut FILE;
        pub fn __srget(arg1: *mut FILE) -> ::libc::c_int;
        pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                          arg3: va_list) -> ::libc::c_int;
        pub fn __swbuf(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
        pub fn __sputc(_c: ::libc::c_int, _p: *mut FILE) -> ::libc::c_int;
        pub fn flockfile(arg1: *mut FILE) -> ();
        pub fn ftrylockfile(arg1: *mut FILE) -> ::libc::c_int;
        pub fn funlockfile(arg1: *mut FILE) -> ();
        pub fn getc_unlocked(arg1: *mut FILE) -> ::libc::c_int;
        pub fn getchar_unlocked() -> ::libc::c_int;
        pub fn putc_unlocked(arg1: ::libc::c_int, arg2: *mut FILE)
         -> ::libc::c_int;
        pub fn putchar_unlocked(arg1: ::libc::c_int) -> ::libc::c_int;
        pub fn getw(arg1: *mut FILE) -> ::libc::c_int;
        pub fn putw(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
        pub fn tempnam(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
         -> *mut ::libc::c_char;
        pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::libc::c_int)
         -> ::libc::c_int;
        pub fn ftello(arg1: *mut FILE) -> off_t;
        pub fn snprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                        arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
        pub fn vfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                       arg3: va_list) -> ::libc::c_int;
        pub fn vscanf(arg1: *const ::libc::c_char, arg2: va_list)
         -> ::libc::c_int;
        pub fn vsnprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                         arg3: *const ::libc::c_char, arg4: va_list)
         -> ::libc::c_int;
        pub fn vsscanf(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                       arg3: va_list) -> ::libc::c_int;
        pub fn dprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...)
         -> ::libc::c_int;
        pub fn vdprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                        arg3: va_list) -> ::libc::c_int;
        pub fn getdelim(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                        arg3: ::libc::c_int, arg4: *mut FILE) -> ssize_t;
        pub fn getline(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                       arg3: *mut FILE) -> ssize_t;
        pub fn asprintf(arg1: *mut *mut ::libc::c_char,
                        arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
        pub fn ctermid_r(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
        pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::libc::c_char;
        pub fn fmtcheck(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
         -> *const ::libc::c_char;
        pub fn fpurge(arg1: *mut FILE) -> ::libc::c_int;
        pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                         arg3: ::libc::c_int) -> ();
        pub fn setlinebuf(arg1: *mut FILE) -> ::libc::c_int;
        pub fn vasprintf(arg1: *mut *mut ::libc::c_char,
                         arg2: *const ::libc::c_char, arg3: va_list)
         -> ::libc::c_int;
        pub fn zopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                     arg3: ::libc::c_int) -> *mut FILE;
        pub fn funopen(arg1: *const ::libc::c_void,
                       arg2:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut ::libc::c_void,
                                                                      arg2:
                                                                          *mut ::libc::c_char,
                                                                      arg3:
                                                                          ::libc::c_int)
                                                     -> ::libc::c_int>,
                       arg3:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut ::libc::c_void,
                                                                      arg2:
                                                                          *const ::libc::c_char,
                                                                      arg3:
                                                                          ::libc::c_int)
                                                     -> ::libc::c_int>,
                       arg4:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut ::libc::c_void,
                                                                      arg2:
                                                                          fpos_t,
                                                                      arg3:
                                                                          ::libc::c_int)
                                                     -> fpos_t>,
                       arg5:
                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut ::libc::c_void)
                                                     -> ::libc::c_int>)
         -> *mut FILE;
        pub fn __sprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                             arg3: size_t, arg4: *const ::libc::c_char, ...)
         -> ::libc::c_int;
        pub fn __snprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                              arg3: ::libc::c_int, arg4: size_t,
                              arg5: *const ::libc::c_char, ...) -> ::libc::c_int;
        pub fn __vsprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                              arg3: size_t, arg4: *const ::libc::c_char,
                              arg5: va_list) -> ::libc::c_int;
        pub fn __vsnprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                               arg3: ::libc::c_int, arg4: size_t,
                               arg5: *const ::libc::c_char, arg6: va_list)
         -> ::libc::c_int;*/
        pub fn JNI_GetDefaultJavaVMInitArgs(args: *mut ::libc::c_void) -> jint;
        pub fn JNI_CreateJavaVM(pvm: *mut *mut JavaVM, penv: *mut *mut ::libc::c_void, args: *mut ::libc::c_void) -> jint;
        pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize, arg3: *mut jsize) -> jint;
        pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::libc::c_void) -> jint;
        pub fn JNI_OnUnload(vm: *mut JavaVM, reserved: *mut ::libc::c_void) -> ();
        //pub fn Agent_OnLoad(vm: *mut JavaVM, options: *mut ::libc::c_char, reserved: *mut ::libc::c_void) -> jint;
        pub fn Agent_OnAttach(vm: *mut JavaVM, options: *mut ::libc::c_char, reserved: *mut ::libc::c_void) -> jint;
        //pub fn Agent_OnUnload(vm: *mut JavaVM) -> ();
    }

}
